{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Patrick Weaver: Blog",
  "language": "en",
  "home_page_url": "https://patrickweaver.net/blog/",
  "feed_url": "https://patrickweaver.net/feed.json",
  "description": "",
  "authors": [
    {
      "name": "Patrick Weaver"
    }
  ],
  "items": [
    {
      "id": "https://patrickweaver.net/blog/irl-html-is-the-place-for-your-most-hand-written-websites/",
      "url": "https://patrickweaver.net/blog/irl-html-is-the-place-for-your-most-hand-written-websites/",
      "title": "IRL HTML Is the Place For Your Most Hand-Written Websites",
      "content_html": "<p>Last year before <a href=\"https://html.energy\">HTML Energy</a>'s <abbr title=\"HyperText Markup Language\">HTML</abbr> Day in <a href=\"https://www.are.na/bay-area-95sssqibasq/w-s-www-gathering\">San Francisco</a> I had the idea to iterate on some of my previous projects like <a href=\"https://www.patrickweaver.net/portfolio/whiteboard-email/\">Whiteboard Email</a>, and make both an app that would do <abbr title=\"Optical character recognition\">OCR</abbr> on HTML, and a website to host truly “hand-written” HTML. That became <a href=\"https://doodles.patrickweaver.net/irl-html/\">IRL HTML</a> and it was good enough to make some <a href=\"https://doodles.patrickweaver.net/irl-html/pages/acc8/\">very simple</a> websites!</p>\n<figure>\n<div style=\"display: flex; max-width: 100%; align-items: center;\">\n  <img src=\"https://patrickweaver.net/images/blog/irl-html/simple-website.png\" alt=\"A screenshot of a website made with IRL HTML. It says Park, With Grass\" style=\"max-width: 50%; margin-right: 2.5px;\">\n  <img src=\"https://patrickweaver.net/images/blog/irl-html/notebook-park.jpg\" alt=\"A photograph of the hand-written code for the website above in a notebook laying in grass.\" style=\"max-width: 50%; margin-left: 2.5px;\">\n</div>\n<figcaption>The published website and the hand written source code, we realized that some letters were more recognizable as upper case, some as lower case.</figcaption>\n</figure>\n<p>The first prototype of IRL HTML used <a href=\"https://tesseract.projectnaptha.com/\">Tesseract.js</a> which is only reliable for typewritten text. Given my success with <a href=\"https://www.patrickweaver.net/portfolio/record-player/\">album covers</a> I tried the Google Vision API, which worked well enough for <em>some</em> (carefully) hand-written HTML, but still made a lot of errors, which might prevent the page from rendering at all.</p>\n<p>A lot of the projects I’ve done over the years have used computer vision in creative ways, and I’ve always been searching for more reliable ways to have computers read hand-written text. At a <a href=\"https://www.recurse.com/\">Recurse Center</a> meetup in SF in January 2024 someone suggested that the ChatGPT API might be capable of it. We made a <a href=\"https://doodles.patrickweaver.net/irl-html/pages/0e98/\">simple website on IRL HTML</a> to commemorate the occasion.</p>\n<p>To get ready for the <a href=\"https://html.energy/events.html\">2024 HTML Day</a> I decided to update IRL HTML using both the ChatGPT and Anthropic Claude APIs. Both were able to read my hand-written HTML code surprisingly well! They do sometimes output text that isn’t really there (notice the <code>&lt;ul&gt;</code> tags were turned into <code>&lt;p&gt;</code> tags in the example below), and sometimes it adds some description of the output, which for this case isn’t useful. One benefit of the multi-modal nature of the LLMs is that I can inform the model that the output is supposed to be HTML, I can add instructions to fix any minor syntax errors. I could probably improve the accuracy even more by combining OCR methods, or making multiple requests to the LLMs.</p>\n<p>The prompt I’m using for both LLM APIs is:</p>\n<blockquote>\n<p><em>This is an image of a piece of paper with HTML code on it. If there are any syntax errors, fix them with the most likely valid HTML. Respond with just the HTML code property formatted, not wrapped in markdown or any description of what is in the response.</em></p>\n</blockquote>\n<p>There is probably some room to iterate on the prompt for better output, but the cycle of testing (especially with different hand-written code) is long and not free, so I may stick with what is working reasonably well.</p>\n<figure>\n<div style=\"display: flex; max-width: 100%; align-items: center;\">\n  <img src=\"https://patrickweaver.net/images/blog/irl-html/about-irl-html-notebook.jpg\" alt=\"A photograph of a notebook with hand-written HTML code for an “About IRL HTML” website\" style=\"max-width: 50%; margin-right: 2.5px;\">\n  <img src=\"https://patrickweaver.net/images/blog/irl-html/about-irl-html-website.png\" alt=\"A screenshot of the website generated from the hand-written code above\" style=\"max-width: 50%; margin-left: 2.5px;\">\n</div>\n<figcaption>More complex hand-written source code, and the webiste (with a picture of itself)</figcaption>\n</figure>\n<p>Overall, though I’m skeptical of the utility of LLMs more generally, it’s exciting to more easily and reliably make the kinds of quirky computer vision projects I’ve been dreaming of for a long time. I’d be interested in smaller handwriting OCR specific models that I might be able to run locally someday!</p>\n",
      "date_published": "2024-07-10T00:00:00Z"
    }
    ,
    {
      "id": "https://patrickweaver.net/blog/imessage-mystery/",
      "url": "https://patrickweaver.net/blog/imessage-mystery/",
      "title": "Unravelling an iMessage URL Parsing Mystery",
      "content_html": "<p>I have long been a fan of frontend-only websites, usually single-page apps, that are able to persist state in sharable URLs despite not having a database or a backend. One of the more complex projects I used this technique for was my <a href=\"https://doodles.patrickweaver.net/crossword/editor\">Crossword Puzzle Editor</a>, which stores an entire puzzle, both clues and correct answers in the URL hash.</p>\n<p>However, when I composed a small puzzle and shared it with a friend via iMessage I was greeted with a link to the app with empty state above a long string of random characters in a blue bubble:</p>\n<figure>\n<div style=\"text-align: center;\">\n  <img src=\"https://patrickweaver.net/images/blog/imessage/broken-link.png\" alt=\"A screenshot of an iMessage conversation with a broken link in it\" style=\"max-width: 300px; margin: 0 auto;\">\n</div>\n</figure>\n<p>I tried again with a smaller puzzle and got the same kind of broken link, but it couldn’t just be the length of the URL because surely all of the tracking URLs used in every marketing email wouldn’t break like this. I tried one of a similar length, it sent flawlessly and rendered as a clean link preview, not the jumble of query string params it really was. I looked closer and noticed that the tracking URL had one visible difference from my crossword URL: it had “-” characters every so often.</p>\n<p>I wrote a quick function to insert intermittent “-”s in the URLs, and remove them on parsing the state from the URL, then tried sending the original crossword. It worked!</p>\n<figure>\n<div style=\"text-align: center;\">\n  <img src=\"https://patrickweaver.net/images/blog/imessage/fixed-link.png\" alt=\"A screenshot of an iMessage conversation with a not broken link in it\" style=\"max-width: 300px; margin: 0 auto;\">\n</div>\n</figure>\n<p>At the time I couldn’t find anyone else discussing the issue online, but my guess is that this quirk of iMessage URL parsing is due to security concerns with parsing text. A significant proportion of the zero day vulnerabilities in iOS are exploited through iMessage, and I would guess that a lot of the techniques used to create them are encoding malicious code in Base64 strings, just like I am with non malicious data.</p>\n<p>I would guess that because “-” is not a valid Base64 character, the parser used by iMessage can review each section separately. I finished up my crossword app adding “-” as the 64th character in every URL hash (I didn’t think about the length being serendipitous with the Base64 encoding until now). In the back of my mind I was curious about how long the sections of Base64 encoded text could be but didn’t look any further into it.</p>\n<p>A few years passed and I saw the following post on Mastodon:</p>\n<blockquote class=\"social-post\">i built a little webapp that saves state as an unruly URI fragment hash but it looks like some clients (like Signal and Apple Messages) don’t want to recognize the whole things as a complete URL. is there anything I can do about that?</blockquote>\n<p>It was time for my weird Base64 URL tidbit to come to the rescue! I replied with the tip about breaking up with “-”s and the original poster replied that it had worked for them as well!</p>\n<p>After being reminded about the technique I was curious to figure out some of the details like, how long exactly could the sections be, and what other characters would work as separators. Using the technique I built <a target=\"_blank\" href=\"https://doodles.patrickweaver.net/imessage-url-state-example/#eyIxIjp7InIiOiIyMjMiLCJnIjoiMjIiLCJiIjoi-MTU3In0sIjIiOnsiciI6MjEwLCJnIjoiMzEiLCJi-IjoiODcifSwiMyI6eyJyIjoiMjA1IiwiZyI6NzMs-ImIiOiIzNiJ9LCI0Ijp7InIiOiIyNTUiLCJnIjoi-MTk3IiwiYiI6MzZ9LCI1Ijp7InIiOiIyNTIiLCJn-IjoiMjQwIiwiYiI6IjExOSJ9LCI2Ijp7InIiOiI2-OSIsImciOiIxNzkiLCJiIjowfSwiNyI6eyJyIjoi-NjEiLCJnIjoiMjAzIiwiYiI6MjMyfSwiOCI6eyJy-IjoiNjEiLCJnIjoiMTA5IiwiYiI6IjI0MiJ9LCI5-Ijp7InIiOiIxOTAiLCJnIjoiMTQ4IiwiYiI6IjIy-OCJ9LCIxMCI6eyJyIjoiMjE0IiwiZyI6IjgxIiwi-YiI6IjE5NCJ9fQ==\">a small app that would store 10 RGB values in the URL</a> (this example has a rainbow), but would also let the user control how frequent the “-” characters were, or replace them with other characters not used in Base64.</p>\n<figure>\n<div style=\"text-align: center;\">\n  <a target=\"_blank\" href=\"https://doodles.patrickweaver.net/imessage-url-state-example/#eyIxIjp7InIiOiIyMjMiLCJnIjoiMjIiLCJiIjoi-MTU3In0sIjIiOnsiciI6MjEwLCJnIjoiMzEiLCJi-IjoiODcifSwiMyI6eyJyIjoiMjA1IiwiZyI6NzMs-ImIiOiIzNiJ9LCI0Ijp7InIiOiIyNTUiLCJnIjoi-MTk3IiwiYiI6MzZ9LCI1Ijp7InIiOiIyNTIiLCJn-IjoiMjQwIiwiYiI6IjExOSJ9LCI2Ijp7InIiOiI2-OSIsImciOiIxNzkiLCJiIjowfSwiNyI6eyJyIjoi-NjEiLCJnIjoiMjAzIiwiYiI6MjMyfSwiOCI6eyJy-IjoiNjEiLCJnIjoiMTA5IiwiYiI6IjI0MiJ9LCI5-Ijp7InIiOiIxOTAiLCJnIjoiMTQ4IiwiYiI6IjIy-OCJ9LCIxMCI6eyJyIjoiMjE0IiwiZyI6IjgxIiwi-YiI6IjE5NCJ9fQ==\"><img src=\"https://patrickweaver.net/images/blog/imessage/colors-app.png\" alt=\"A screenshot of the web app to test long URLs\" style=\"max-width: 500px; margin: 0 auto;\"></a>\n</div>\n</figure>\n<p>Here is an example with the same 10 colors as the link above, but with a “+” every 10th character:</p>\n<blockquote class=\"long-link\"><a target=\"_blank\" href=\"https://doodles.patrickweaver.net/imessage-url-state-example/#eyIxIjp7I+nIiOiIyMj+MiLCJnIjo+iMjIiLCJi+IjoiMTU3I+n0sIjIiOn+siciI6MjE+wLCJnIjoi+MzEiLCJiI+joiODcifS+wiMyI6eyJ+yIjoiMjA1+IiwiZyI6N+zMsImIiOi+IzNiJ9LCI+0Ijp7InIi+OiIyNTUiL+CJnIjoiMT+k3IiwiYiI+6MzZ9LCI1+Ijp7InIiO+iIyNTIiLC+JnIjoiMjQ+wIiwiYiI6+IjExOSJ9L+CI2Ijp7In+IiOiI2OSI+sImciOiIx+NzkiLCJiI+jowfSwiNy+I6eyJyIjo+iNjEiLCJn+IjoiMTA0I+iwiYiI6Mj+MyfSwiOCI+6eyJyIjoi+MTI3IiwiZ+yI6IjkwIi+wiYiI6IjI+0MiJ9LCI5+Ijp7InIiO+iIxOTAiLC+JnIjoiMTQ+4IiwiYiI6+IjIyOCJ9L+CIxMCI6ey+JyIjoiMjE+0IiwiZyI6+IjgxIiwiY+iI6IjE5NC+J9fQ==\">https://doodles.patrickweaver.net/imessage-url-state-example/#eyIxIjp7I+nIiOiIyMj+MiLCJnIjo+iMjIiLCJi+IjoiMTU3I+n0sIjIiOn+siciI6MjE+wLCJnIjoi+MzEiLCJiI+joiODcifS+wiMyI6eyJ+yIjoiMjA1+IiwiZyI6N+zMsImIiOi+IzNiJ9LCI+0Ijp7InIi+OiIyNTUiL+CJnIjoiMT+k3IiwiYiI+6MzZ9LCI1+Ijp7InIiO+iIyNTIiLC+JnIjoiMjQ+wIiwiYiI6+IjExOSJ9L+CI2Ijp7In+IiOiI2OSI+sImciOiIx+NzkiLCJiI+jowfSwiNy+I6eyJyIjo+iNjEiLCJn+IjoiMTA0I+iwiYiI6Mj+MyfSwiOCI+6eyJyIjoi+MTI3IiwiZ+yI6IjkwIi+wiYiI6IjI+0MiJ9LCI5+Ijp7InIiO+iIxOTAiLC+JnIjoiMTQ+4IiwiYiI6+IjIyOCJ9L+CIxMCI6ey+JyIjoiMjE+0IiwiZyI6+IjgxIiwiY+iI6IjE5NC+J9fQ==</a></blockquote>\n<p>Or one with a “*” every 300th character (there is only one):</p>\n<blockquote class=\"long-link\"><a target=\"_blank\" href=\"https://doodles.patrickweaver.net/imessage-url-state-example/#eyIxIjp7InIiOiIyMjMiLCJnIjoiMjIiLCJiIjoiMTU3In0sIjIiOnsiciI6MjEwLCJnIjoiMzEiLCJiIjoiODcifSwiMyI6eyJyIjoiMjA1IiwiZyI6NzMsImIiOiIzNiJ9LCI0Ijp7InIiOiIyNTUiLCJnIjoiMTk3IiwiYiI6MzZ9LCI1Ijp7InIiOiIyNTIiLCJnIjoiMjQwIiwiYiI6IjExOSJ9LCI2Ijp7InIiOiI2OSIsImciOiIxNzkiLCJiIjowfSwiNyI6eyJyIjoiNjEiLCJnIjoiMTA0Iiw*iYiI6MjMyfSwiOCI6eyJyIjoiMTI3IiwiZyI6IjkwIiwiYiI6IjI0MiJ9LCI5Ijp7InIiOiIxOTAiLCJnIjoiMTQ4IiwiYiI6IjIyOCJ9LCIxMCI6eyJyIjoiMjE0IiwiZyI6IjgxIiwiYiI6IjE5NCJ9fQ==\">https://doodles.patrickweaver.net/imessage-url-state-example/#eyIxIjp7InIiOiIyMjMiLCJnIjoiMjIiLCJiIjoiMTU3In0sIjIiOnsiciI6MjEwLCJnIjoiMzEiLCJiIjoiODcifSwiMyI6eyJyIjoiMjA1IiwiZyI6NzMsImIiOiIzNiJ9LCI0Ijp7InIiOiIyNTUiLCJnIjoiMTk3IiwiYiI6MzZ9LCI1Ijp7InIiOiIyNTIiLCJnIjoiMjQwIiwiYiI6IjExOSJ9LCI2Ijp7InIiOiI2OSIsImciOiIxNzkiLCJiIjowfSwiNyI6eyJyIjoiNjEiLCJnIjoiMTA0Iiw*iYiI6MjMyfSwiOCI6eyJyIjoiMTI3IiwiZyI6IjkwIiwiYiI6IjI0MiJ9LCI5Ijp7InIiOiIxOTAiLCJnIjoiMTQ4IiwiYiI6IjIyOCJ9LCIxMCI6eyJyIjoiMjE0IiwiZyI6IjgxIiwiYiI6IjE5NCJ9fQ==</a></blockquote>\n<p>300 character long sections of Base64 was longer that I expected would work, but as soon as I increased the “distance” between the separator characters to 302, which is a “-” (or “+”...) every 303rd character the links started to break.</p>\n<figure>\n  <div style=\"text-align: center;\">\n    <img src=\"https://patrickweaver.net/images/blog/imessage/broken-link-colors.png\" alt=\"A screenshot of an iMessage conversation with a broken link because the separator is the 303rd character\" style=\"max-width: 500px; margin: 0 auto;\">\n  </div>\n</figure>\n<p>Interestingly, the limit was 301 character long sections of Base64 on both iMessage and Signal!</p>\n<figure>\n<div style=\"text-align: center;\">\n  <img src=\"https://patrickweaver.net/images/blog/imessage/signal.jpg\" alt=\"A screenshot of a signal conversation with a workign link and a broken link\" style=\"max-width: 300px; margin: 0 auto;\">\n</div>\n<figcaption>A working link (301 distance) above a broken link (302 distance) in Signal</figcaption>\n</figure>\n<p>Now that I know the exact cut off of 301 characters I’ve been able to find <a href=\"https://blog.jonschneider.com/2023/06/the-mystery-of-broken-jwt-magic-link.html\">one other blog post</a>, but I’m still surprised that this isn’t more widely known.</p>\n<p>Try out the app yourself or experiment with other platforms, I would love to learn more about the details behind this! This link without a hash will randomly generate 10 colors (and then store them in the URL hash): <a target=\"_blank\" href=\"https://doodles.patrickweaver.net/imessage-url-state-example\">doodles.patrickweaver.net/imessage-url-state-example</a>.</p>\n",
      "date_published": "2024-02-05T00:00:00Z"
    }
    ,
    {
      "id": "https://patrickweaver.net/blog/a-blog-post-with-every-html-element/",
      "url": "https://patrickweaver.net/blog/a-blog-post-with-every-html-element/",
      "title": "A Blog Post With Every HTML Element",
      "content_html": "<!-- markdownlint-disable MD033 MD013 -->\n<style>\n    section > ul {\n        padding-left: 0;\n    }\n    section > ul > li {\n        display: inline-block;\n    }\n\n    section > ul > li::after {\n        content: ', ';\n    }\n\n    section > ul > li:last-child::after {\n        content: '';\n    }\n\n    .confetti {\n        position: fixed;\n        font-size: 3rem;\n        top: 50px;\n    }\n\n    #pw-links-portal {\n    width: 300px;\n    height: 200px;\n    margin: 0.5rem;\n    }\n\n    .very-long-url-wrapper {\n        max-width: 100%;\n        overflow: scroll;\n        padding-bottom: 1rem;\n    }\n\n    #weird-table {\n        border: 5px double #8f8f9f;\n        padding: 5px;\n    }\n\n    #weird-table .low-numbers {\n        background-color: #ff4f2f4f;\n    }\n\n    #weird-table .high-numbers {\n        background-color: #2f4fff4f;\n    }\n\n    #weird-table th {\n        background-color: #2fff2f1f;\n    }\n\n    #weird-table th[scope='row'] {\n    background-color: #2fffff1f;\n    text-align: left;\n}\n\n    #weird-table th,\n    #weird-table td {\n        border: 2px solid black;\n        padding: 5px;\n        min-width: 40px;\n        text-align: center;\n    }\n\n    #weird-table th:nth-child(1),\n    #weird-table td:nth-child(1) {\n        border: none;\n    }\n\n    #weird-table th:nth-child(2),\n    #weird-table td:nth-child(2) {\n        border-radius: 3px;\n    }\n\n    #weird-table th:nth-child(3),\n    #weird-table td:nth-child(3) {\n        border-radius: 6px;\n    }\n\n    #weird-table th:nth-child(4),\n    #weird-table td:nth-child(4) {\n        border-radius: 9px;\n    }\n\n    #weird-table th:nth-child(5),\n    #weird-table td:nth-child(5) {\n        border-radius: 12px;\n    }\n\n    #weird-table th:nth-child(6),\n    #weird-table td:nth-child(6) {\n        border-radius: 15px;\n    }\n\n    #weird-table th:nth-child(7),\n    #weird-table td:nth-child(7) {\n        border-radius: 18px;\n    }\n\n    #everything-form {\n        border: 5px double #080f18;\n        border-radius: 20px;\n        padding: 10px;\n    }\n\n    #everything-form label {\n        display: block;\n    }\n\n    #everything-form {\n        display: grid;\n        grid-template-columns: 20% 20% 20% 20% 20%;\n        grid-template-rows: 20% 20% 20% 20% 20%;\n    }\n\n    #everything-form > * {\n        margin: 2px;\n    }\n\n    #eform-type {\n        grid-column-start: 1;\n        grid-column-end: 3;\n        grid-row-start: 1;\n        grid-row-end: 3;\n        background-color: #f8fffa;\n        border-radius: 3px;\n        border: 1px solid #d8dfda;\n        text-align: right;\n        padding: 4px;\n    }\n\n    #eform-size {\n        grid-column-start: 1;\n        grid-column-end: 3;\n        grid-row-start: 3;\n        grid-row-end: 7;\n        text-align: center;\n        margin: 5px 10px 5px 5px;\n    }\n\n    #eform-size-meter {\n        width: 100%;\n    }\n\n    #eform-size > fieldset {\n        width: 100%;\n        background-color: #faeaff;\n    }\n\n    #eform-size > fieldset > legend {\n        width: 100%;\n        background-color: #fcf2ff;\n        border-radius: 10px;\n        border: 1px solid #dcd2df;\n    }\n\n    #eform-size > * {\n        display: inline-block;\n    }\n\n    #eform-color {\n        grid-column-start: 3;\n        grid-column-end: 5;\n        grid-row-start: 1;\n        grid-row-end: 3;\n        text-align: right;\n        background-color: #fafaef;\n        padding: 6px;\n        border-radius: 5px;\n        border: 2px solid #bf6ff8;\n    }\n\n    #eform-dream {\n        grid-column-start: 5;\n        grid-column-end: 6;\n        grid-row-start: 1;\n        grid-row-end: 6;\n        position: relative;\n        border-radius: 3px;\n        background-color: #e8ffe8;\n        display: grid;\n        grid-template-columns: 25% 25% 25% 25%;\n        grid-template-rows: 33% 34% 33%;\n    }\n\n    #eform-dream > label {\n        writing-mode: vertical-lr;\n        text-orientation: upright;\n        vertical-align: middle;\n        padding: 1rem 0.5rem;\n        grid-column-start: 1;\n        grid-column-end: 3;\n        grid-row-start: 1;\n        grid-row-end: 4;\n    }\n\n    #dream-secret {\n        text-orientation: sideways;\n        font-size: 0.5rem;\n    }\n\n    #dream-input {\n        resize: none;\n        font-family: cursive;\n        font-size: 2rem;\n        display: block;\n        margin: 4px;\n        font-color: #38789f;\n        writing-mode: vertical-lr;\n        text-orientation: sideways;\n        grid-column-start: 3;\n        grid-column-end: 5;\n        grid-row-start: 1;\n        grid-row-end: 4;\n    }\n\n    #form-completion-label {\n        display: inline-block;\n        margin-top: 3rem;\n        width: 100%;\n        text-align: center;\n        grid-column-start: 3;\n        grid-column-end: 5;\n        grid-row-start: 3;\n        grid-row-end: 4;\n    }\n\n    #form-completion {\n        grid-column-start: 3;\n        grid-column-end: 5;\n        grid-row-start: 4;\n        grid-row-end: 5;\n        width: 100%;\n        margin-top: 1rem;\n    }\n\n    #eform-submit-button {\n        border: 4px solid #6faf38;\n        background-color: #8fcf58;\n        color: #ffeff8;\n        grid-column-start: 3;\n        grid-column-end: 5;\n        grid-row-start: 5;\n        grid-row-end: 6;\n        border-radius: 4px;\n        box-shadow: -4px -4px 3px #bfbfef;\n        margin: 5px;\n        font-size: 2rem;\n        font-family: serif;\n        position: relative;\n        cursor: pointer;\n    }\n\n    #eform-submit-button:hover {\n        border-color: #51b578;\n        background-color: #47775A;\n        color: #F0F6FB;\n        border-radius: 6px;\n        font-size: 2.25rem;\n    }\n\n    #eform-submit-button:active {\n        border-color: #54c480;\n        background-color: #4E7E52;\n        color: #F4FAFF;\n        border-radius: 6px;\n        top: -2px;\n        left:-2px;\n        box-shadow: -2px -2px 1px #bfbfef;\n        border-radius: 3px;\n        font-size: 2.5rem;\n    }\n\n    #everything-output {\n        border: 4px dotted #f47a9e;\n        border-radius: 10px;\n        width: 300px;\n        max-width: 90%;\n        height: 100px;\n        display: block;\n        margin: 2rem 1rem;\n        text-align: center;\n        padding: 1rem;\n    }\n\n    #palm-sheriff {\n        font-size: 0.75rem;\n        line-height: 0.75rem;\n        margin: 0 40%;\n    }\n\n    #menu-button {\n        border: 2px solid #2f2f2f;\n        border-radius: 10px;\n        width: 200px;\n        height: 3rem;\n        padding: 0.5rem;\n        background-color: #2f8fdf;\n        color: #ffffff;\n        text-align: center;\n        box-shadow: -3px -3px 10px #9fcff8;\n    }\n\n    #menu-button:hover {\n        box-shadow: -3px -3px 15px #9fcff8;\n        background-color: #2888d0;\n        cursor: pointer;\n    }\n\n    #menuitem-example {\n        width: 300px;\n        border: 2px solid #2f2f2f;\n        padding: 0;\n        background-color: #78c8fd;\n        margin: 1px 0 0;\n        border-radius: 4px;\n    }\n\n    #menuitem-example > menuitem {\n        display: inline-block;\n        width: 100%;\n        padding: 10px;\n        border-bottom: 1px solid #000000;\n    }\n\n    #menuitem-example > menuitem:last-child {\n        border: none;\n    }\n\n    #nobr-box {\n        width: 170px;\n        border: 2px solid #2f2f2f;\n        border-radius: 3px;\n        padding: 5px;\n        background-color: #fdfaf7;\n        overflow: scroll;\n        margin: 1rem 0;\n    }\n\n    footer {\n        margin: 2rem 0 1rem;\n        border: 1px solid #dfd8df;\n        border-radius: 5px;\n        padding: 1rem 10px;\n        background-color: #fefcfe;\n    }\n\n    @media (max-width: 600px) {\n        #everything-form {\n        }\n\n        #everything-form {\n            display: grid;\n            grid-template-columns: 20% 20% 20% 20% 20%;\n            grid-template-rows: 25% 25% 35% 5% 10%;\n        }\n\n        #everything-form label {\n            font-size: 1rem;\n        }\n\n        #eform-type {\n            grid-column-start: 1;\n            grid-column-end: 5;\n            grid-row-start: 1;\n            grid-row-end: 2;\n        }\n\n        #eform-color {\n            grid-column-start: 1;\n            grid-column-end: 5;\n            grid-row-start: 2;\n            grid-row-end: 3;\n        }\n\n        #eform-size {\n            grid-column-start: 1;\n            grid-column-end: 5;\n            grid-row-start: 3;\n            grid-row-end: 4;\n            text-align: center;\n            margin: 5px 10px 5px 5px;\n        }\n\n        #eform-dream {\n            grid-column-start: 5;\n            grid-column-end: 6;\n            grid-row-start: 1;\n            grid-row-end: 4;\n        }\n\n        #eform-dream > label {\n            grid-column-start: 1;\n            grid-column-end: 5;\n            grid-row-start: 1;\n            grid-row-end: 2;\n        }\n\n        #dream-secret {\n            text-orientation: sideways;\n            font-size: 0.5rem;\n        }\n\n        #dream-input {\n            grid-column-start: 1;\n            grid-column-end: 5;\n            grid-row-start: 2;\n            grid-row-end: 4;\n        }\n\n        #form-completion-label {\n            grid-column-start: 1;\n            grid-column-end: 5;\n            grid-row-start: 4;\n            grid-row-end: 5;\n            font-size: 0.75rem;\n            margin: 0;\n            text-align: left;\n        }\n\n        #form-completion {\n            grid-column-start: 1;\n            grid-column-end: 5;\n            grid-row-start: 5;\n            grid-row-end: 6;\n            margin-top: 0;\n        }\n\n        #eform-submit-button {\n            grid-column-start: 5;\n            grid-column-end: 6;\n            grid-row-start: 4;\n            grid-row-end: 6;\n            border: 4px solid #6faf38;\n            border-radius: 2px;\n            box-shadow: -4px -4px 3px #bfbfef;\n            margin: 5px;\n            font-size: 1rem;\n            font-family: serif;\n            position: relative;\n            writing-mode: vertical-lr;\n            text-orientation: sideways;\n        }\n\n        #eform-submit-button:hover {\n            border-radius: 4px;\n            font-size: 1rem;\n            writing-mode: vertical-rl;\n        }\n\n        #eform-submit-button:active {\n            border-radius: 6px;\n            top: -2px;\n            left:-2px;\n            box-shadow: -2px -2px 1px #bfbfef;\n            border-radius: 2px;\n            font-size: 1.25rem;\n        }\n\n        #palm-sheriff {\n        font-size: 0.75rem;\n        line-height: 0.75rem;\n        margin: 0 30%;\n    }\n}\n</style>\n<section>\n<p>After learning a little bit more about web accessibility last year I had been exploring some of the less common <abbr title=\"Hyper Text Markup Language\">HTML</abbr> elements, and making changes to this website, like wrapping the text of the posts on this blog in <code>&lt;article&gt;</code> tags and adding a <code>&lt;main&gt;</code> tag in the website’s layout templates (this website is built using <a href=\"https://www.11ty.dev/\" target=\"_blank\">Eleventy</a>).</p>\n<p>I had previously done some work to make sure that <code>&lt;figure&gt;</code> and <code>&lt;figcaption&gt;</code> elements were layed out nicely for images with associated captions, and I had been impressed with various <a href=\"https://www.recurse.com/\" target=\"_blank\">Recurser’s</a> implementation of footnotes or sidenotes<sub id=\"footnote-1-link\"><a href=\"https://patrickweaver.net/blog/a-blog-post-with-every-html-element/#footnote-1\">1</a></sub>, and have been thinking it would be interesting to see what other interesting layouts were possible with just HTML.</p>\n<p>I could, element by element, continue to add support (mostly by making <abbr title=\"Cascading Style Sheets\">CSS</abbr> updates for each element to fit in with the rest of my style choices) as I came across specific needs for them, but not one to shy away from an exhaustive exploration, I decided to write this post and attempt to use every element.</p>\n<p>A goal of the post, was to avoid delaying other future posts with CSS updates on a previously unused element, but in reality it took a year and a half to make all the updates for just this post! I am using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\" target=\"_blank\">MDN Web Docs list of HTML elements</a> as a reference which has more than 100 tags divided into a few categories, which I will also use in this post. Many of the tags like <code>&lt;html&gt;</code> don’t make sense to include in the text of a blog post, but if you’re viewing this post on <a href=\"https://www.patrickweaver.net\">patrickweaver.net</a>, then every one of the elements is used somewhere on this page.</p>\n</section>\n<hr>\n<h2>The Elements</h2>\n<section id=\"main-root\">\n<h3>Main Root</h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html\"><code>&lt;html&gt;</code></a></li>\n</ul>\n<p>I didn’t have to make any changes to the <code>&lt;html&gt;</code> tag for this post, but one thing I don’t always remember to include is the <code>lang</code> property (in this case <code>lang=&quot;en&quot;</code>).</p>\n</section>\n<section id=\"document-metadata\">\n<h3>Document Metadata</h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base\"><code>&lt;base&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head\"><code>&lt;head&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link\"><code>&lt;link&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta\"><code>&lt;meta&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style\"><code>&lt;style&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title\"><code>&lt;title&gt;</code></a></li>\n</ul>\n<p>I wasn’t familiar with the <code>&lt;base&gt;</code> tag before writing this post, though I’ve now added one with relative links to my layout templates. This caused a few issues with things like local development, and relative links, though they were easily resolved. The rest of the metadata tags are familiar and were already here.</p>\n</section>\n<section id=\"sectioning-root\">\n<h3>Sectioning Root</h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body\"><code>&lt;body&gt;</code></a></li>\n</ul>\n<p>Like the Document metadata tags, in the layout, though it was interesting to read the documentation and learn about attributes, like <code>onbeforeprint</code> that provides functionality I’ve used more hacky methods to accomplish previously, and <code>onblur</code>, whose primary utility seems to be annoying popups.</p>\n</section>\n<section id=\"content-sectioning\">\n<hgroup>\n<h3>Content Sectioning</h3>\n<p>Headers and Document Organization</p>\n</hgroup>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address\"><code>&lt;address&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article\"><code>&lt;article&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside\"><code>&lt;aside&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer\"><code>&lt;footer&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header\"><code>&lt;header&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements\"><code>&lt;h1&gt;</code>, <code>&lt;h2&gt;</code>, <code>&lt;h3&gt;</code>, <code>&lt;h4&gt;</code>, <code>&lt;h5&gt;</code>, <code>&lt;h6&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hgroup\"><code>&lt;hgroup&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main\"><code>&lt;main&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav\"><code>&lt;nav&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section\"><code>&lt;section&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/search\"><code>&lt;search&gt;</code></a></li>\n</ul>\n<p>When I first looked at the list I assumed that <code>&lt;address&gt;</code> would be designed exclusively for mailing addresses, but was surprised to see that it can be used for email addresses, and even links. I updated the email address on the About page of site site, but I’ll add an <code>&lt;address&gt;</code> below also:</p>\n<address>\n    <p>Email Patrick:</p>\n    <a href=\"mailto:hello.patrickw@gmail.com\">hello.patrickw@gmail.com</a>\n</address>\n<p>As I mentioned above, I updated the blog post page template to use the <code>&lt;article&gt;</code> tag, but reading the documentation, I’m now wondering if it would fit on every page of the site.</p>\n<p>I’m now using <code>&lt;aside&gt;</code> elements, which represent, <q cite=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside\">a portion of a document whose content is only indirectly related to the document’s main content</q>, to wrap around my footnotes at the bottom of this page (though I may try to style them as sidenotes in the future). The current design of this website doesn’t have a <code>&lt;footer&gt;</code>, but I’ve added one to this blog post, and while I had a <code>&lt;header&gt;</code> element on the page header previously, I now know that more than one is acceptable so there is one around the header section of each blog posts as well.</p>\n<h4>Heading elements</h4>\n<p>As part of the style update and cleanup of this site that inspired this post I realized I was often using headers with incorrect hierarchy, which I cleaned up. Though I never reached 6 levels of headers, the closest I got was <code>&lt;h3&gt;</code> in some of the blog posts with multiple sections and subsections.</p>\n<h5>How to use top level headings</h5>\n<p>It is a little bit unclear how to use <code>&lt;h1&gt;</code> tags in a post like this from just the MDN documentation. This <a href=\"https://www.w3.org/QA/Tips/Use_h1_for_Title\">tip from the W3C</a> suggests different implementations for pages with standalone, or collection content, which would make it difficult to use the same templates and styles for different pages on this site.</p>\n<h6>How I decided to handle it</h6>\n<p>Before writing this post I had updated the site to use <code>&lt;h1&gt;</code> for the name of the site (my name) at the top, <code>&lt;h2&gt;</code> for the section name, for this page, “Blog”, and <code>&lt;h3&gt;</code> for the title of what would be the <code>&lt;article&gt;</code> on a page. However, after reading the documentation and the tip above, I decided to update the hierarchy and use <code>&lt;h1&gt;</code> for different things on different pages, and use classes for styles, which is probably more in line with the separation of concerns of HTML and CSS (which means this paragraph is below an <code>&lt;h6&gt;</code>).</p>\n<p>Sometime between when I started this experiment in early 2022 and when I published it in Summer 2023 <code>&lt;hgroup&gt;</code> and <code>&lt;search&gt;</code> were added to the MDN documentation (which I realize is not the official spec). I’ve added an <code>&lt;hgroup&gt;</code> around the heading of this section, with a subtitle <code>&lt;p&gt;</code> element. <code>&lt;search&gt;</code> is a semantic element that indicates that an input can be used for search, not for search results (with the exception of quick results that populate within a form ). While a <code>&lt;search&gt;</code> element that contains a <code>&lt;form&gt;</code> works with just HTML on a website that can generate search results on a server, because this website is statically generated the example below requires JavaScript. I haven’t seen a <code>&lt;search&gt;</code> element anywhere else, neither MDN’s header search, or google.com use it in 2023.</p>\n<!-- markdownlint-disable -->\n<search>\n<form id=\"search-form\">\n    <label for=\"text-search\">Search this post: </label>\n    <input type=\"search\" id=\"text-search\">\n    <button id=\"search-button\" type=\"button\">Search</button>\n</form>\n</search>\n<output id=\"search-output\" form=\"search-form\" for=\"text-search\" name=\"search-output\" style=\"display: none; margin: 1rem; border: 1px solid #555; padding: 0.5rem;\">\n<ul id=\"search-output-list\"></ul>\n</output>\n<script>\n    const searchInput = document.getElementById(\"text-search\");\n    const searchButton = document.getElementById(\"search-button\");\n    const searchOutput = document.getElementById(\"search-output\");\n    const searchOutputList = document.getElementById(\"search-output-list\");\n    searchButton.addEventListener('click', searchCb);\n    searchInput.addEventListener('keydown', searchCb);\n    function searchCb(event) {\n        const { keyCode } = event;\n        if (keyCode && keyCode !== 13) return;\n        event.preventDefault()\n        const text = searchInput.value;\n        searchOutput.style.display = text ? \"block\" : \"none\";\n        if (!text) return;\n        const a = document.getElementsByTagName(\"article\")[0].innerText;\n        let index = 0\n        let count = 0;\n        while (index !== -1 && count < 5) {\n            count++;\n            index = a.indexOf(text, index);\n            if (index !== -1) {\n                const newResult = findStringInArticle(index, text)\n                searchOutputList.innerHTML += `<li><code class=\"code-regular\">${newResult}</code></li>`\n                index++;\n            }\n        }\n        function escapeHtml(unsafe) {\n            // https://stackoverflow.com/questions/6234773/can-i-escape-html-special-chars-in-javascript\n            return unsafe\n                .replace(/&/g, \"&amp;\")\n                .replace(/</g, \"&lt;\")\n                .replace(/>/g, \"&gt;\")\n                .replace(/\"/g, \"&quot;\")\n                .replace(/'/g, \"&#039;\");\n        }\n        function findStringInArticle(index, text) {\n            if (index >= 0) {\n                let start = index - 100;\n                if (start < 0 ) start = 0;\n                let end = index + 100;\n                if (end > a.length) end = a.length;\n                return `${start > 0 ? '…' : ''}${escapeHtml(a.slice(start, index))}<mark>${escapeHtml(a.slice(index, index + text.length))}</mark>${escapeHtml(a.slice(index + text.length, end))}${end < a.length ? '…' : ''}`;\n            }\n        }\n    }\n</script>\n<noscript>\n    <p>This search functionality will only be interactive when JavaScript is enabled.</p>\n</noscript>\n<!-- markdownlint-enable -->\n<!-- markdownlint-disable MD033 MD013 -->\n<p>The <code>&lt;main&gt;</code> element was one of the initial curiosities that led me down the path of reading about and implementing every element, though it wasn’t until I read through the MDN list that I added a <code>&lt;nav&gt;</code> element around the menu at the top of this page. I’ve added <code>&lt;section&gt;</code> elements to this post, but I’m not sure how often I will use them elsewhere. One reason is that it makes it harder to mix and match HTML and markdown with visually clear nesting in the <a href=\"https://github.com/patrickweaver/pw20/blob/main/build/blog/a-blog-post-with-every-html-element.md\">document where I am writing this post</a>.</p>\n</section>\n<section id=\"text-content\">\n<h3>Text Content</h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote\"><code>&lt;blockquote&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd\"><code>&lt;dd&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div\"><code>&lt;div&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl\"><code>&lt;dl&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt\"><code>&lt;dt&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption\"><code>&lt;figcaption&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure\"><code>&lt;figure&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr\"><code>&lt;hr&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li\"><code>&lt;li&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menu\"><code>&lt;menu&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol\"><code>&lt;ol&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p\"><code>&lt;p&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre\"><code>&lt;pre&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul\"><code>&lt;ul&gt;</code></a></li>\n</ul>\n<p>I had previously used <code>&lt;blockquote&gt;</code> for embedding tweets into blog posts, but for this post I decided to add styles for standalone quotes. I didn’t know about the <code>&lt;blockquote&gt;</code> <code>cite</code> property or <code>&lt;cite&gt;</code> element until reading the docs more closely:</p>\n<figure class=\"blockquote-figure\">\n    <blockquote cite=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote#attributes\">\n        <h4><code>cite</code></h4>\n        <p>A URL that designates a source document or message for the information quoted. This attribute is intended to point to information explaining the context or the reference for the quote.</p>\n    <figcaption><cite>MDN</cite> on <code>&lt;blockquote&gt;</code></figcaption>\n</blockquote></figure>\n<p><code>&lt;dd&gt;</code>, <code>&lt;dl&gt;</code>, and <code>&lt;dt&gt;</code> are elements that, after finding out about them when first looking into more obscure HTML elements, I was very surprised to have not known about sooner. Although, it’s unclear from the documentation whether lists like the links on the current version of my <a href=\"https://web.archive.org/web/20220628123804/https://www.patrickweaver.net/portfolio/\">portfolio page</a> should use <code>&lt;dl&gt;</code> (I’m currently using <code>&lt;ul&gt;</code>). I am curious how <code>&lt;ol&gt;</code> and <code>&lt;ul&gt;</code> became part of almost every “Intro to HTML” class, but <code>&lt;dl&gt;</code> is relatively obscure. It’s also strange that <code>&lt;ol&gt;</code> and <code>&lt;ul&gt;</code> have default margins, but for <code>&lt;dl&gt;</code> the margin is on <code>&lt;dd&gt;</code>.</p>\n<h4>HTML list elements</h4>\n<dl>\n    <dt><code>dl</code></dt><dd>Description list</dd>\n    <dt><code>ol</code></dt><dd>Ordered list</dd>\n    <dt><code>ul</code></dt><dd>Unordered list</dd>\n</dl>\n<p><code>&lt;div&gt;</code> has acquired a bad reputation on the modern web due to overuse, so I was surprised to be using relatively few <code>&lt;div&gt;</code> elements, though once I started using elements that I wanted to style together, I ended up with around 20. It shows how unnecessary most <code>&lt;div&gt;</code>s probably are, though this site has minimal generic “sections”.</p>\n<p>Among the first more obscure elements that I added to this site were <code>&lt;figcaption&gt;</code> and <code>&lt;figure&gt;</code>. I was adding some blog posts that had originally been published on Medium, and wanted to add captions below images in a web-semantically correct way. Though after reading the documentation, which says <code>&lt;figure&gt;</code> can be used for, <q cite=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure#usage_notes\">image, illustration, diagram, code snippet, etc.,</q> I realized that there are a lot of places where I currently have code blocks that I could be using them.</p>\n<p>I have always liked <code>&lt;hr&gt;</code> elements a lot, but I’m never sure when to use them. The documentation says, <q cite=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr#try_it\">While it may still be displayed as a horizontal rule in visual browsers, this element is now defined in semantic terms, rather than presentational terms, so if you wish to draw a horizontal line, you should do so using appropriate CSS</q> which made me revisit the <code>&lt;hr&gt;</code> styles on this site and I decided to include an emoji in an <code>hr:after</code> rule, though I should check how that works on a screen reader.</p>\n<p>The items in the (inline styled) lists of elements on this page are of course <code>&lt;li&gt;</code> elements, though I had never looked at the documentation until now. It’s interesting that the same <code>&lt;li&gt;</code> element is used in both <code>&lt;ol&gt;</code> and <code>&lt;ul&gt;</code> lists, with quirks like <q cite=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li#attributes\">The value attribute has no meaning for unordered lists</q>, but is not used to wrap the <code>&lt;dt&gt;</code> and <code>&lt;dd&gt;</code> elements in a <code>&lt;dl&gt;</code>.</p>\n<p>I had not encountered <code>&lt;menu&gt;</code> before writing this post, and I was initially surprised that it survived to HTML 5 (while <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menuitem\"><code>&lt;menuitem&gt;</code></a> didn’t) because modern browsers treat it as essentially a <code>&lt;ul&gt;</code>. Researching further <a href=\"https://en.wikipedia.org/wiki/HTML_element#Basic_text\">on Wikipedia</a> I read:</p>\n<figure class=\"blockquote-figure\">\n    <blockquote cite=\"https://en.wikipedia.org/wiki/HTML_element#Basic_text\">MENU existed in HTML Tags, and was standardized in HTML 2.0; deprecated in HTML 4.0 Transitional; invalid in HTML 4.0 Strict; then redefined in HTML5, but removed in HTML 5.2,</blockquote>\n</figure>and now I don’t know what to think, but here’s a <code>&lt;menu&gt;</code>:<p></p>\n<menu id=\"interactive-menu\">\n    <script type=\"text/javascript\">\n        const b = (id) => `\n            <div\n                id=\"${id}\"\n                class=\"confetti\"\n                style=\"left: ${Math.random() * 1000}px\"\n            >\n                🎈\n            </div>\n        `;\n        const s = (id) => `\n            <div\n                id=\"${id}\"\n                class=\"confetti\"\n                style=\"left: ${Math.random() * 1000}px\"\n            >\n                🧽\n            </div>\n        `;\n        const m = document.getElementById('interactive-menu');\n        function balloons() { confetti(b) };\n        function sponges() { confetti(s) };\n        function confetti(f) {\n            const vh = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0)\n            for (let i = 0; i < 3; i++) {\n                const id = `c-${String(Math.random()).slice(2, 9)}`\n                m.insertAdjacentHTML('beforeend', f(id))\n                sink(id)\n            }\n            async function sink(id) {\n                const e = document.getElementById(id);\n                const startTop = getComputedStyle(e)?.top ?? '0px';\n                let top = parseInt(startTop.slice(0, startTop.indexOf('p')), 10);\n                while (top < vh + 100) {\n                    top = top + 2;\n                    e.style.top = `${top}px`;\n                    await new Promise(r => setTimeout(r, 16.67));\n                }\n                e.remove();\n            }\n        }\n    </script>\n    <li><button onclick=\"balloons()\">Balloons</button></li>\n    <li><button onclick=\"sponges()\">Sponges</button></li>\n    <noscript>\n        <p>This menu will only be interactive when JavaScript is enabled.</p>\n    </noscript>\n</menu>\n<p><code>&lt;ol&gt;</code> and <code>&lt;ul&gt;</code> are some of the HTML elements I used in my earliest web pages, and more recently I try to use <code>&lt;ul&gt;</code> with CSS in places that are semantically lists, but might not be styled like a traditional list.</p>\n<p>I was surprised not to find more guidance on using <code>&lt;p&gt;</code> tags on <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p\">the MDN docs</a>, something I wonder often when adding non long form text to a website is, “is this really a paragraph?” But, it seems like as far as HTML is concerned, if it’s not a heading, then probably!</p>\n<p>Before reading the documentation I had really only considered using <code>&lt;pre&gt;</code> tags along with <code>&lt;code&gt;</code> tags for code blocks, but the example used on MDN is used to show how <code>&lt;pre&gt;</code> can display meaningful whitespace for things like:</p>\n<figure class=\"no-padding-figure\"><pre role=\"img\" aria-label=\"An ASCII picture of a house with the label, 'in this house we write semantic HTML'\">\n  ┏┓\n  ┃┃╱╲ in\n  ┃╱╱╲╲ this\n  ╱╱╭╮╲╲house\n  ▔▏┗┛▕▔ we\n  ╱▔▔▔▔▔▔▔▔▔▔╲\nwrite semantic HTML\n  ╱╱┏┳┓╭╮┏┳┓ ╲╲\n  ▔▏┗┻┛┃┃┗┻┛▕▔\n</pre></figure>\n</section>\n<section id=\"inline-text-semantics\">\n<h3>Inline Text Semantics</h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a\"><code>&lt;a&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr\"><code>&lt;abbr&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b\"><code>&lt;b&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdi\"><code>&lt;bdi&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdo\"><code>&lt;bdo&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/br\"><code>&lt;br&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite\"><code>&lt;cite&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code\"><code>&lt;code&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/data\"><code>&lt;data&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dfn\"><code>&lt;dfn&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em\"><code>&lt;em&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i\"><code>&lt;i&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd\"><code>&lt;kbd&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark\"><code>&lt;mark&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q\"><code>&lt;q&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rp\"><code>&lt;rp&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rt\"><code>&lt;rt&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby\"><code>&lt;ruby&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/s\"><code>&lt;s&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/samp\"><code>&lt;samp&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small\"><code>&lt;small&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span\"><code>&lt;span&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong\"><code>&lt;strong&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub\"><code>&lt;sub&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup\"><code>&lt;sup&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time\"><code>&lt;time&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u\"><code>&lt;u&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/var\"><code>&lt;var&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/wbr\"><code>&lt;wbr&gt;</code></a></li>\n</ul>\n<p>As with other very common tags I was curious to get to the documentation for <code>&lt;a&gt;</code> to see if there was anything I was unaware of, or had been using incorrectly. I was surprised to discover that <code>&lt;a href=&quot;#&quot;&gt;link&lt;/a&gt;</code> links to the top of the page after years as just using it as a placeholder when I didn’t know the URL yet.</p>\n<p><code>&lt;abbr&gt;</code> seems likely to be the least used tag, especially because the <abbr title=\"MDN Web Docs, previously Mozilla Developer Network and formerly Mozilla Developer Center\">MDN</abbr> documentation doesn’t make a great case for it <q cite=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr#default_styling\">the purpose of this element is purely for the convenience of the author.</q></p>\n<p>The distinction between <code>&lt;b&gt;</code> and <code>&lt;strong&gt;</code>, as the docs have it, is not what I had previously thought (that <code>&lt;strong&gt;</code> was the HTML5 replacement for <code>&lt;b&gt;</code>). I think the distinction is more nuanced and overlapping than the technical nature of the documentation is really able to convey. The way I will probably explain it to other people in the future is that, for the most part, you should use <code>&lt;b&gt;</code> for <b>single words</b> (or compound words), <strong>and <code>&lt;strong&gt;</code> for whole sentences or phrases</strong>. This is more a rule of thumb and bypasses the actual distinction. The documentation reads:</p>\n<figure>\n    <blockquote>\n        The <code>&lt;strong&gt;</code> element is for content that is of greater importance, while the <code>&lt;b&gt;</code> element is used to draw attention to text without indicating that it’s more important.\n    </blockquote>\n    <figcaption>\n        <cite><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong#b_vs._strong\">MDN on “<code class=\"code-regular\">&lt;b&gt;</code> vs. <code class=\"code-regular\">&lt;strong&gt;</code>”</a></cite>\n    </figcaption>\n</figure>\n<p>But I can’t think of many instances where I would want to draw attention to a word, where that word is not more important than other words. The recommendation seems to be from a reality where, for the most part, all words are of equal importance, but deserve different amounts of attention, which doesn’t seem very common.</p>\n<p>I’ll probably think of <code>&lt;b&gt;</code> from now on as the HTML tag with a similar effect as the quotation marks used for “emphasis” you might see on signage that can cause intergenerational confusion.</p>\n<p><code>&lt;bdi&gt;</code> is a tag for a concept that I hadn’t considered until now, text whose direction might (or might not) differ from the direction of the surrounding text. The examples on the documentation are all names, but could stand in for any user inputted text. In the future I will probably try to wrap any tags, like the ones controlled by the input below, that might contain arbitrary user inputted unicode characters in a <code>&lt;bdi&gt;</code> tag just to be safe.</p>\n<form>\n<p><label for=\"bdi-name-input\">What is your name?\n<input type=\"text\" id=\"bdi-name-input\"></label></p>\n</form>\n<p>Hello, <bdi id=\"bdi-name-display\">&nbsp;&nbsp;&nbsp;&nbsp;</bdi>, thanks for reading!</p>\n<div>\n<button id=\"rtl-fill\" type=\"button\">Fill with a RTL language name</button> (<a href=\"https://en.wikipedia.org/wiki/Abdul_Rahman_Munif\" target=\"_blank\">عَبْد الرَّحْمٰن بِن إِبْرَاهِيم المُنِيف</a>)\n</div>\n<script type=\"text/javascript\">\n    const bdi_i = document.getElementById(\"bdi-name-input\");\n    const bdi_o = document.getElementById(\"bdi-name-display\");\n    const bdi_b = document.getElementById(\"rtl-fill\");\n    bdi_i.addEventListener(\"input\", function(event) {\n        bdi_o.innerHTML = event.target?.value || \"&nbsp;&nbsp;&nbsp;&nbsp;\";\n    })\n    bdi_b.addEventListener(\"click\", function(event) {\n        const rtl_name = 'عَبْد الرَّحْمٰن بِن إِبْرَاهِيم المُنِيف';\n        bdi_o.innerHTML = rtl_name;\n        bdi_i.value = rtl_name;\n    })\n</script>\n<noscript>\n    <p>This form will only be interactive when JavaScript is enabled.</p>\n</noscript>\n<p><code>&lt;bdo&gt;</code> I will probably use less often because I don’t work with RTL languages often, but it is still good to know how to handle small amounts of RTL text, like this link to the page for HTML on the Farsi Wikipedia: <a href=\"https://fa.wikipedia.org/wiki/%D8%A7%DA%86%E2%80%8C%D8%AA%DB%8C%E2%80%8C%D8%A7%D9%85%E2%80%8C%D8%A7%D9%84\" target=\"_blank\"><bdo dir=\"rtl\">اچ‌تی‌ام‌ال</bdo></a>.</p>\n<p><code>&lt;br&gt;</code> is interesting to me, because for a time (a long time ago) it seemed to be as misused as <code>&lt;div&gt;</code> has been recently, but, as CSS has gotten more robust that is probably less often the case; though I wonder if it is still taught early in HTML classes. It’s interesting that the example use case in the docs is poetry because it makes me wonder how the grey area between a paragraph and a standalone line was considered in creating the HTML spec. It also seems like a <code>&lt;pre&gt;</code> tag might be a better fit in some cases.</p>\n<p><code>&lt;cite&gt;</code> and <code>&lt;q&gt;</code> are interesting because they try to add HTML semantic elements for meaning that is also conveyed by visible punctuation in most languages. It’s the kind of redundancy that underscores repetitiousness of working with computers (the default style for <cite>cite</cite> uses italics while <q cite=\"https://patrickweaver.net/blog/a-blog-post-with-every-html-element/this%20is%20not%20really%20a%20quotation\">q</q> adds quotation marks not in the text.).</p>\n<p>I’ve clearly used many <code>&lt;code&gt;</code> elements in this post so far, but reading the documentation made me wonder whether the recently released Markdown support in Google Docs uses <code>&lt;code&gt;</code> for text, but on inspecting the HTML of a Doc, I remembered that <code>&lt;canvas&gt;</code> is used to render the document now.</p>\n<p>Occasionally the MDN documentation examples are difficult to mentally translate to real-world use cases. <code>&lt;data&gt;</code> is one of these, where the only examples show a <code>&lt;data&gt;</code> element with a <code>value</code> property with product IDs wrapped around product names In that case the IDs seem either, user facing, in which case it would probably be better to display them to the user, or non user facing, in which case, I’m not sure who the “data” is for. Interestingly, <code>&lt;data&gt;</code> doesn’t seem to appear in the <a href=\"https://www.w3.org/TR/2011/WD-html5-20110405/\">W3C HTML5 specification</a>.</p>\n<p><code>&lt;dfn&gt;</code> is another strange element because it seems like it is misnamed, as it wraps, not the definition of a term, but instead that term within the definition. It does <a href=\"http://www.martinrinehart.com/frontend-engineering/engineers/html/html-tag-history.html\">only seem to have been part of the never officially adopted HTML 2.0 proposal</a>, and it exemplifies the academic nature of the early web. The <a href=\"http://www.martinrinehart.com/frontend-engineering/engineers/html/html-tag-history.html\">HTML Tags: Past, Present, Proposed</a> page on martinrinehart.com defines <dfn title=\"HyperText Markup Language 2.0\">HTML 2.0</dfn> as <q cite=\"http://www.martinrinehart.com/frontend-engineering/engineers/html/html-tag-history.html\">There never was an HTML 2.0 standard, but these all shaped browser development in the late 20th century</q> with references to several RFC documents.</p>\n<p><code>&lt;em&gt;</code> and <code>&lt;i&gt;</code> bring up similar usage questions as <code>&lt;b&gt;</code> and <code>&lt;strong&gt;</code>, but in my opinion with even more nuance, especially, as the documentation notes, with other more specific tags like <code>&lt;cite&gt;</code> that also by default italicize text in most browsers. The rule of thumb from above also for the most part fits here, <code>&lt;em&gt;</code> for single words, and <code>&lt;i&gt;</code> for sentences or phrases, though the examples in the documentation seem to mostly use <code>&lt;i&gt;</code> for drawing attention to potential confusion, as in, <q cite=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em#i_vs._em\">The word <i>the</i> is an article</q>.</p>\n<p><code>&lt;kbd&gt;</code> is another tag that makes me wonder about the conceptual boundaries of the usage of the tag. It is intended for specifying keys on a computer keyboard, for example: to type the <code>&lt;</code> character used for (the non escaped) version of the tags in this post, I press <kbd>Shift</kbd> + <kbd>,</kbd> (the styles here on <code>&lt;kbd&gt;</code> are applied through custom CSS). But I’m curious if it would also be appropriate to put a <code>&lt;kbd&gt;</code> around something like <i>Right click</i> (in this case I used <code>&lt;i&gt;</code> instead).</p>\n<p><code>&lt;mark&gt;</code> is interesting because it suggests a 2-way authoring web that was originally envisioned, but failed to come to fruition, with usage notes like, <q>Think of this like using a <mark>highlighter pen</mark> in a book to mark passages that you find of interest.</q> The yellow here is the default style in all major browsers.</p>\n<p><code>&lt;rp&gt;</code>, <code>&lt;rt&gt;</code>, and <code>&lt;ruby&gt;</code> all relate to rendering <a href=\"https://en.wikipedia.org/wiki/Agate_(typography)\">“ruby” or “agate” fonts</a>, which are the smallest legible text used in print. They are used in HTML to, <q>provide pronunciation, translation, or transliteration information for East Asian typography.</q> Because I don’t read any East Asian languages, I’ll use the same example as the MDN docs do below. Interestingly, <code>&lt;rp&gt;</code> is used to hide parentheses characters, which are included in the source. It’s surprising to me that there is an element to hide these characters in a very rare instance, but we still rely on CSS to <a href=\"https://www.scottohara.me/blog/2017/04/14/inclusively-hidden.html#hiding-content-visually\">hide content visually</a> (but still show it to screen readers).</p>\n<ruby>\n漢 <rp>(</rp><rt>kan</rt><rp>)</rp>\n字 <rp>(</rp><rt>ji</rt><rp>)</rp>\n</ruby>\n<p><code>&lt;s&gt;</code> is the strikethrough element, which should be used to indicate text that is not accurate or relevant, but was previously. Along with <code>&lt;menu&gt;</code> it is one of two elements (or <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u#usage_notes\">according to MDN 3 with <code>&lt;u&gt;</code></a>) that were <a href=\"http://www.martinrinehart.com/frontend-engineering/engineers/html/html-tag-history.html\">deprecated in HTML 4.01, and un-deprecated and redefined in HTML5</a>. The redefinition changes the use of the tag from presentational, which should now be achieved with CSS, to relevant to the context of the text. However, some screen readers don’t announce the strikethrough, which seems potentially confusing. I’ve added the CSS recommended by the MDN docs to my website, so the strikethrough should be announced here.</p>\n<ul>\n  <li><s>HTML 3.0: <code>&lt;s&gt;</code> is used for presentation</s></li>\n  <li>HTML 5: <code>&lt;s&gt;</code> is used for removed text</li>\n</ul>\n<p><code>&lt;samp&gt;</code> is another element I wasn’t aware of before reading the MDN docs. It is used for rendering the output of a computer program, which I had previously just used <code>&lt;code&gt;</code> for (I just updated my <a href=\"https://patrickweaver.net/blog/how-to-raspberry-pi-server/\">Raspberry Pi blog post</a> to use <code>&lt;samp&gt;</code>). Another example is below:</p>\n<figure class=\"figure-with-outline\">\n<figcaption>A “Hello, World” program in JavaScript:</figcaption>\n<code>\nconsole.log(\"Hello, World\")\n</code>\n<br><br>\n<samp>\nHello, World\n</samp>\n</figure>\n<p><code>&lt;small&gt;</code> is used to render smaller text, which is something I would usually have done with CSS. The MDN docs don’t provide much clarity about which strategy to use: <q>Authors are encouraged to use their best judgement when determining whether to use <code>&lt;small&gt;</code> or CSS.</q>. <small>I will probably continue to use CSS for the most part since the effect seems to be presentational for the most part.</small></p>\n<p><code>&lt;span&gt;</code> is a very familiar element, but reading the documentation made me wonder for the first time why HTML and CSS allow contradictory element styles like a </p><div style=\"display: inline\"><code>&lt;div style=\"display: inline\" /&gt;</code></div><p>\n</p><p> or a <span style=\"display: block\"><code>&lt;span style=\"display: block\" /&gt;</code></span>. Though the <code>&lt;div&gt;</code> breaks the parent <code>&lt;p&gt;</code> tag, while the <code>&lt;span&gt;</code> does not.</p>\n<p><code>&lt;sub&gt;</code> (used for footnotes here) and <code>&lt;sup&gt;</code> (used in the equation below) are more elements I probably have used the CSS implementations of previously (though it is appropriate for presentation only super or subscript.)</p>\n<p><code>&lt;time&gt;</code> seems like a helpful element for creating semantic HTML, but even Google doesn’t seem to use it in <a href=\"https://www.google.com/search?q=%22Patrick+Weaver%22+%22HTML%22\">search results</a>. I’ve updated the dates on my blog posts to use it.</p>\n<p><code>&lt;u&gt;</code> has probably my favorite quote from the MDN docs, <q>Most of the time, you actually don’t want to use <code>&lt;u&gt;</code>.</q> Their strongest recommendation seems to be indicating <u class=\"u-sp\">spellling</u> errors.</p>\n<p><code>&lt;var&gt;</code> is a way to indicate semantically that a string is a variable for either math or programming. For example, rendering the pythagorean theorem uses both <code>&lt;var&gt;</code> and <code>&lt;sup&gt;</code>: <var>a</var><sup>2</sup> + <var>b</var><sup>2</sup> = <var>c</var><sup>2</sup>.</p>\n<p><code>&lt;wbr&gt;</code> was also a new element until now, but it solves a problem I have hit many times before, breaking long “words” at certain points, specifically URLs. If I put a <code>&lt;wbr&gt;</code> element at clear break points in this URL: <a href=\"https://www.patrickweaver.net/pages/averylongurlwithoutanypunctuationbutstillmadeupofwords/\">https://www.patrickweaver.net<wbr>/pages<wbr>/a<wbr>very<wbr>long<wbr>url<wbr>without<wbr>any<wbr>punctuation<wbr>but<wbr>still<wbr>made<wbr>up<wbr>of<wbr>words/</a> then it will break at clear points at different screen widths, which is is more readable compared to the same link without the <code>&lt;wbr&gt;</code> elements:</p>\n<p class=\"very-long-url-wrapper\"><a href=\"https://www.patrickweaver.net/pages/averylongurlwithoutanypunctuationbutstillmadeupofwords/\">https://www.patrickweaver.net/pages/averylongurlwithoutanypunctuationbutstillmadeupofwords/</a></p>\n<p>Though including hyphen characters in the URL also creates clear breakpoints in modern browsers. I did have to wrap the URL above in a special scrollable <code>&lt;p&gt;</code> to prevent it from breaking the layout of the rest of the page.</p>\n</section>\n<section id=\"image-and-multimedia\">\n<h3>Image and Multimedia</h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area\"><code>&lt;area&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio\"><code>&lt;audio&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img\"><code>&lt;img&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map\"><code>&lt;map&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track\"><code>&lt;track&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a></li>\n</ul>\n<p><code>&lt;area&gt;</code> and <code>&lt;map&gt;</code> are elements that I hadn’t been familiar with previously, even though I had made a few image map type websites in the days before CSS 3. It seems like an indication of how seldom they are used these days that the tools for debugging the boundaries of <code>&lt;area&gt;</code> elements are hard to use. One <code>&lt;area&gt;</code> border at a time will display while using tab focus, but styling the elements does not work (unless there is a <code>display</code> hack I couldn’t figure out). It’s also somewhat strange that <code>&lt;area&gt;</code> is essentially an <code>&lt;a&gt;</code> with a shape.</p>\n<p>Here’s a <code>&lt;map&gt;</code> (with <code>&lt;area&gt;</code>s on each tag linking to MDN) of a handwritten HTML document I made for June 3rd’s <a href=\"https://html.energy/events.html\">HTML Day Freewrite</a> in SF.</p>\n<figure>\n<map name=\"park-html-map\">\n    <area shape=\"rect\" coords=\"38 20 150 55\" alt=\"HTML tag\" href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html\">\n    <area shape=\"rect\" coords=\"32 62 143 98\" alt=\"head tag\" href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head\">\n    <area shape=\"rect\" coords=\"32 107 170 140\" alt=\"title tag\" href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title\">\n    <area shape=\"rect\" coords=\"28 195 195 230\" alt=\"title closing tag\" href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title\">\n    <area shape=\"rect\" coords=\"25 240 178 275\" alt=\"head closing tag\" href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head\">\n    <area shape=\"rect\" coords=\"22 287 130 325\" alt=\"body tag\" href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body\">\n    <area shape=\"rect\" coords=\"201 285 297 320\" alt=\"body closing tag\" href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body\">\n    <area shape=\"rect\" coords=\"30 334 160 374\" alt=\"html tag\" href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html\">\n</map>\n<img usemap=\"#park-html-map\" src=\"https://patrickweaver.net/images/blog/html/park-html.jpg\" alt=\"A processed photograph of handwritten HTML in a notebook\" style=\"width: 300px;\">\n</figure>\n<p><code>&lt;audio&gt;</code> is one of the classic multimedia HTML 5 tags so I’ve used it before, but thinking about it now, it’s surprising I don’t see them more often in the 2020s. I would guess that there are more in use than I thought, for example, the <a href=\"https://bandcamp.com\">Bandcamp</a> player uses a hidden <code>&lt;audio&gt;</code> element even though the UI is a custom mix of <code>&lt;a&gt;</code> and <code>&lt;div&gt;</code>s inside a <code>&lt;table&gt;</code> oddly enough.</p>\n<figure>\n<p><audio controls=\"\" src=\"https://patrickweaver.net/images/blog/html/audio-element.m4a\"></audio></p>\n<figcaption>A recording of me reading the paragraph above. (Excuse my scratchy late night voice)</figcaption>\n</figure>\n<p><code>&lt;img&gt;</code> is of course one of the first elements I used, but I was curious what properties could be used with it that I might not have heard of. <code>srcset</code>, used for specifying multiple sizes of the same image to load at different screen resolutions, was one of those. I’ve created a demo below, which goes against the spirit of <code>srcset</code>.</p>\n<p>The image below has 3 images provided to its <code>srcset</code> property:</p>\n<ol>\n<li>A yellow background and a monospace font that is 300 pixels wide and should render when the page is less than 520 pixels wide</li>\n<li>A blue background and a serifed font that should render when the page is between 520 and 800 pixels wide</li>\n<li>A green background and a script font that should render when the page is greater than 800 pixels wide.</li>\n</ol>\n<p><img src=\"https://patrickweaver.net/images/blog/html/srcset-700.png\" srcset=\"https://patrickweaver.net/images/blog/html/srcset-300.png 300w, https://patrickweaver.net/images/blog/html/srcset-500.png 500w, https://patrickweaver.net/images/blog/html/srcset-700.png 700w\" sizes=\"(max-width: 520px) 300px, (max-width: 800px) 500px, 700px\" style=\"max-width: 700px; width: 100%;\" alt=\"A demo of the srcset property of the HTML <img> tag that loads different images at different sizes\" id=\"image-with-srcset\"></p>\n<p>I have tested it, and it does work, but it takes a lot of forethought to make sure that you will be able to load the correct image. Things like the browser’s cache, and scaled displays will change the behavior. If you want to see the effect you will probably need to load the page in a private window on a non scaled or “retina” display.</p>\n<p>It’s interesting that while both <code>&lt;audio&gt;</code> and <code>&lt;video&gt;</code> are less widely used than <code>&lt;img&gt;</code> even after their introduction in HTML 5, the distribution of videos online seems to be centralized, mostly on YouTube, while audio is more decentralized, with people serving individual files when distributing things like podcasts, even though the audio player that is often used is not on the web.</p>\n<figure>\n<video controls=\"\" height=\"300\" muted=\"\" poster=\"https://patrickweaver.net/images/blog/html/audio-and-video-tags-poster.jpg\" preload=\"metadata\" width=\"495\" id=\"audio-and-video-tags-video\">\n    <source src=\"https://patrickweaver.net/images/blog/html/audio-and-video-tags.mp4\" type=\"video/mp4\">\n    <track default=\"\" kind=\"captions\" srclang=\"en\" src=\"https://patrickweaver.net/images/blog/html/audio-and-video-tags.vtt\">\n    <a href=\"https://patrickweaver.net/images/blog/html/audio-and-video-tags.mp4\"> Download the video</a>\n</video>\n<embed type=\"video/mp4\" src=\"https://patrickweaver.net/images/blog/html/audio-and-video-tags.mp4\" width=\"495\" height=\"300\" title=\"A screen recording of my dev setup while writing the paragraph above.\" style=\"display: none\" id=\"audio-and-video-tags-embed\">\n<object type=\"video/mp4\" data=\"https://patrickweaver.net/images/blog/html/audio-and-video-tags.mp4\" width=\"495\" height=\"300\" style=\"display: none;\" id=\"audio-and-video-tags-object\">\n<img src=\"https://patrickweaver.net/images/blog/html/audio-and-video-tags-poster.jpg\" alt=\"a still of a screen recording\">\n</object>\n<figcaption>A screen recording of my dev setup while writing the paragraph above. </figcaption>\n<fieldset>\n    <legend>Select below to control if the video above is shown in a <code>&lt;video&gt;</code>, <code>&lt;embed&gt;</code>, or <code>&lt;object&gt;</code> element:</legend>\n    <div>\n        <input type=\"radio\" id=\"audio-and-video-tags-video-option\" name=\"audio-and-video-tags\" value=\"video\" checked=\"\">\n        <label for=\"audio-and-video-tags-video-option\"><code class=\"code-regular\">&lt;video&gt;</code></label>\n    </div>\n    <div>\n        <input type=\"radio\" id=\"audio-and-video-tags-embed-option\" name=\"audio-and-video-tags\" value=\"embed\">\n        <label for=\"audio-and-video-tags-embed-option\"><code class=\"code-regular\">&lt;embed&gt;</code></label>\n    </div>\n    <div>\n        <input type=\"radio\" id=\"audio-and-video-tags-object-option\" name=\"audio-and-video-tags\" value=\"object\">\n        <label for=\"audio-and-video-tags-object-option\"><code class=\"code-regular\">&lt;object&gt;</code></label>\n    </div>\n</fieldset>\n<script type=\"text/javascript\">\n    const viEl = document.getElementById('audio-and-video-tags-video');\n    const emEl = document.getElementById('audio-and-video-tags-embed');\n    const obEl = document.getElementById('audio-and-video-tags-object');\n    document.querySelectorAll(\"input[name='audio-and-video-tags']\").forEach((input) => {\n        input.addEventListener('change', (event) => {\n            const shouldDisplay = event.target.value;\n            if (shouldDisplay === 'video') {\n                viEl.style.display = 'block';\n                emEl.style.display = 'none';\n                obEl.style.display = 'none';\n            } else if (shouldDisplay === 'embed') {\n                viEl.style.display = 'none';\n                emEl.style.display = 'block';\n                obEl.style.display = 'none';\n            } else if (shouldDisplay === 'object') {\n                viEl.style.display = 'none';\n                emEl.style.display = 'none';\n                obEl.style.display = 'block';\n            }\n        });\n    });\n</script>\n<noscript>\n    <p>The embedded video elements will only be toggleable when JavaScript is enabled.</p>\n</noscript>\n</figure>\n<p>One reason for this may be that there are still some quirks with <code>&lt;video&gt;</code> elements. For example, there is a <code>&lt;figcaption&gt;</code> accompanying the video above, but when I initially tried creating the element with a self closing tag it did not render. Also, as I’m writing this, Safari does not support the video at all, likely because of the development server I am using not supporting the “Range” request header. I am curious to find out whether the hosted version of the site (on GitHub pages) will support playing the video in Safari. I thought that I might have a similar issue with <code>&lt;track&gt;</code>, but that just turned out to be me not setting up my <a href=\"https://www.11ty.dev/\">Eleventy</a> build correctly for <code>.vtt</code> files.</p>\n</section>\n<section id=\"embedded-content\">\n<h3>Embedded Content</h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed\"><code>&lt;embed&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object\"><code>&lt;object&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture\"><code>&lt;picture&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/portal\"><code>&lt;portal&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source\"><code>&lt;source&gt;</code></a></li>\n</ul>\n<p>It is somewhat surprising that <code>&lt;embed&gt;</code> and <code>&lt;object&gt;</code> have not been deprecated since most of their uses have been superseded by specific tags like <code>&lt;video&gt;</code> and <code>&lt;iframe&gt;</code>. Maybe eventually they will be, or they will just live on in the name of backwards compatibility.</p>\n<p>Speaking of <code>&lt;iframe&gt;</code> it’s also interesting that the very 90s name “iframe” (“inline frame”, not “iPod Frame” or something, and I was surprised to learn does render <code>display: inline</code>) has survived while <code>&lt;frame&gt;</code> was deprecated in HTML 5. I thought that <code>&lt;iframe&gt;</code> might be a way to force the <code>&lt;img&gt;</code> <code>srcset</code> example above to render the smaller images on a high DPI display, but even at 150px wide on my device the large image still renders:</p>\n<figure>\n<iframe width=\"150\" height=\"200\" src=\"https://patrickweaver.net/pages/srcset\"></iframe>\n<figcaption>An embed of a page with just the srcset example  from above at 150px wide.\n</figcaption></figure>\n<p><code>&lt;picture&gt;</code> is a tag that is, with <code>&lt;source&gt;</code> actually intended for layout tricks like the <code>srcset</code> experiment I tried above, rendering different versions of an image in different situations. The image below should show an icon of a computer when used with a mouse/trackpad, or an icon of a phone when used with a touch screen (using the <code>pointer</code> media query to determine), and should fall back to an image of a red circle with a line through it when neither media query is appropriate. The responsive design developer tools in your browser should trick it, though interestingly, not when inspecting an element.</p>\n<picture>\n    <source srcset=\"https://patrickweaver.net/images/blog/html/no.png\" media=\"(pointer:none)\" type=\"image/png\">\n    <source srcset=\"https://patrickweaver.net/images/blog/html/phone.png\" media=\"(pointer:coarse)\" type=\"image/png\">\n    <source srcset=\"https://patrickweaver.net/images/blog/html/computer.png\" media=\"(pointer:fine)\" type=\"image/png\">\n    <img src=\"https://patrickweaver.net/images/blog/html/no.png\" alt=\"an icon of a computer when used with a mouse/trackpad, an icon of a phone when used with a touch screen, or an image of a red circle with a line through otherwise\">\n</picture>\n<p><code>&lt;portal&gt;</code> is one of the more mysterious sounding elements, and seems intended for the iPad-style link previews that I’ve seen implemented on some websites on hover, <a href=\"https://web.dev/hands-on-portals/\">but also come with SPA-like performance benefits</a>. It unfortunately is still an experimental feature and isn’t (as of 2023) enabled by default in any browsers. It seems that it <a href=\"https://medium.com/swlh/portals-in-chrome-going-on-a-test-drive-66b16971fb19\">used to be an available experimental flag in Chrome</a>, but today in 2023 it is not available at <a href=\"chrome://flags\">chrome://flags</a>. I’ll include one below in case it works for future readers! I did try it in an very old Chromium version I still had installed. <code>&lt;portal&gt;</code> doesn’t seem to be part of the <a href=\"https://www.w3.org/TR/2011/WD-html5-20110405/\">HTML 5 Spec</a>, I’m not sure why it’s included in the MDN documentation.</p>\n<figure>\n<portal id=\"pw-links-portal\" src=\"https://www.patrickweaver.net/links/#links\"></portal>\n<figcaption>\nA <code>&lt;portal&gt;</code> element that should display the <a href=\"https://www.patrickweaver.net/links/#links\">“Links”</a> page on patrickweaver.net, if the feature is ever implemented in browsers.\n</figcaption>\n</figure>\n</section>\n<section id=\"svg-and-mathml\">\n<h3>SVG and MathML</h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/svg\"><code>&lt;svg&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/math\"><code>&lt;math&gt;</code></a></li>\n</ul>\n<p>This is an interesting section of the documentation because it pairs one of the most ubiquitous elements with one of the most obscure. <code>&lt;svg&gt;</code> elements are everywhere, especially that tools like Figma and Sketch have made them easy to prototype and export. Pairing them with <code>&lt;math&gt;</code> in the documentation evokes a more artisanal, hand-crafted <code>&lt;svg&gt;</code> that is relatively uncommon these days. I’ve gone hand-crafted here and drawn some <code>&lt;svg&gt;</code> circles.</p>\n<figure>\n<svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\" stroke=\"white\" fill=\"white\" width=\"200\"><circle cx=\"50\" cy=\"50\" r=\"49\" fill=\"red\"></circle><circle cx=\"47\" cy=\"50\" r=\"42\" fill=\"orange\"></circle><circle cx=\"50\" cy=\"53\" r=\"35\" fill=\"yellow\"></circle><circle cx=\"55\" cy=\"52\" r=\"28\" fill=\"green\"></circle><circle cx=\"52\" cy=\"48\" r=\"21\" fill=\"indigo\"></circle><circle cx=\"54\" cy=\"50\" r=\"14\" fill=\"blue\"></circle><circle cx=\"52\" cy=\"55\" r=\"7\" fill=\"violet\"></circle></svg>\n<figcaption>An svg that shows overlapping circles each with a different color of the rainbow.</figcaption>\n</figure>\n<p><code>&lt;math&gt;</code> is really a wrapper element for other non HTML elements from the <a href=\"https://www.w3.org/TR/MathML3/\" target=\"_blank\">MathML</a> namespace, so I guess I don’t have to include every possible child element here. I’ll stick to something simple: <math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"inline\"><mrow><mn>2</mn><mo>+</mo><mn>2</mn><mo>=</mo><mn>5</mn></mrow></math>\n</p>\n</section>\n<section id=\"scripting\">\n<h3>Scripting</h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noscript\"><code>&lt;noscript&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script\"><code>&lt;script&gt;</code></a></li>\n</ul>\n<p>I did a deep dive into <code>&lt;canvas&gt;</code>, specifically <a href=\"https://doodles.patrickweaver.net/canvas-lines/\">drawing crisp lines</a> in 2020 while I was at <a href=\"https://www.recurse.com/\">Recurse Center</a>. One thing I wasn’t familiar with before reading the MDN docs though, was that there is a maximum size for a <code>&lt;canvas&gt;</code> element in each browser (though all modern browsers it is about 32 thousand pixels in each dimension). Below is a re-implementation of <code>&lt;marquee&gt;</code> with <code>&lt;canvas&gt;</code> and <code>&lt;script&gt;</code> (and <code>&lt;noscript&gt;</code>).</p>\n<p><canvas id=\"marquee-canvas\" width=\"600\" height=\"100\" style=\"width: 300px; height: 50px;\"></canvas></p>\n<p><label for=\"toggleMarqueeButton\">Start or Stop the fake <code>&lt;marquee&gt;</code>:</label>\n<button onClick=\"toggleMarquee()\" id=\"toggleMarqueeButton\">Stop</button></p>\n<script type=\"text/javascript\">\n    const canvasWidth = 300;\n    const canvasHeight = 50;\n    var dpr = window.devicePixelRatio || 1;\n    var canvas = document.getElementById(\"marquee-canvas\");\n    var context = canvas.getContext(\"2d\");\n    canvas.width = canvasWidth*dpr;\n    canvas.height = canvasHeight*dpr;\n    context.scale(dpr, dpr);\n    context.fillStyle = \"black\";\n    context.font = \"bold 40px Arial\";\n\n    const defaultTimer = 16.6;\n    let timer = defaultTimer;\n    let xVal = canvasWidth;\n    const text = \"<marquee>\";\n\n    const toggleMarqueeButton = document.getElementById(\"toggleMarqueeButton\");\n    let marqueeStatus = true;\n    function toggleMarquee() {\n        toggleMarqueeButton.innerHTML = marqueeStatus ? \"Start\" : \"Stop\";\n        timer = marqueeStatus ? 0 : defaultTimer;\n        marqueeStatus = !marqueeStatus;\n        if (marqueeStatus) draw();\n    }\n\n    function drawText(text, x, y) {\n        context.fillText(text, x, y);\n    }\n\n    function draw() {\n        setTimeout(() => {\n            if (xVal < 0) {\n                xVal = canvasWidth;\n            }\n            context.clearRect(0, 0, canvasWidth, canvasHeight);\n            drawText(text, xVal, 42);\n            drawText(text, xVal - canvasWidth, 42);\n            xVal--;\n            if (timer > 0) draw();\n        }, timer);\n    }\n    draw();\n</script>\n<p><noscript><p>The <code>&lt;marquee&gt;</code> like animation above will only be render when JavaScript is enabled.</p></noscript></p>\n<p>There were a lot of tags that I expected to feel a little out of date when I started this post, but <code>&lt;script&gt;</code> wasn’t one of them, but now that I have written most of the post, and have created a few <code>&lt;script&gt;</code> tags, I’m realizing how little I use them now. For most of the code that I write, even though most of it is JavaScript, all of the “scripting” gets put into on <code>&lt;script&gt;</code> tag by build tools and it ends up feeling more like boilerplate than a “markup” tag.</p>\n<p>On the other hand, for most of the interactive websites I’ve made, I’ve rarely included a <code>&lt;noscript&gt;</code> tag with the exception of those minified and compiled single page apps where the user would likely get a blank page if it weren’t for the <code>&lt;noscript&gt;</code> tag (and even then, probably less often than I should have, though I’ve made sure to include one with every <code>&lt;script&gt;</code> tag here).</p>\n</section>\n<section id=\"demarcating-edits\">\n<h3>Demarcating Edits</h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del\"><code>&lt;del&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins\"><code>&lt;ins&gt;</code></a></li>\n</ul>\n<p>Another set of <ins>new to me</ins> elements <del>I had never come across before</del> <ins>on</ins> reading the MDN documentation, <code>&lt;del&gt;</code> and <code>&lt;ins&gt;</code> seem to be intended for <del>creating</del> <ins>use in</ins> a word processor. Reading about them led to yet another round of, “<del>I wonder if these are used in rendering Google Docs?</del> <ins>Oh wait, it’s all <code>&lt;canvas&gt;</code></ins>.”</p>\n</section>\n<section id=\"table-content\">\n<h3>Table Content</h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\"><code>&lt;caption&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col\"><code>&lt;col&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup\"><code>&lt;colgroup&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table\"><code>&lt;table&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody\"><code>&lt;tbody&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td\"><code>&lt;td&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot\"><code>&lt;tfoot&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th\"><code>&lt;th&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead\"><code>&lt;thead&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr\"><code>&lt;tr&gt;</code></a></li>\n</ul>\n<p>It’s not a new insight that <code>&lt;table&gt;</code> elements were overused for layout purposes on the early web, but an irony that I’m only realizing now is that recently, as the web has gotten more and more populated by data, that <code>&lt;table&gt;</code> elements have become rarely used, probably mostly due to their clunky default design, but probably also because one main goal of creating a web UI for the data that is otherwise probably stored in database tables, is to create a <i>different</i> view of the same data.</p>\n<p>I don’t have any tabular data as this is an exclusively <em>document</em> based blog post, but below I’ve added a table with some custom CSS and “data” on emoji that is likely only accurate for the Apple emoji set in 2023. I wasn’t familiar with <code>&lt;col&gt;</code> and <code>&lt;colgroup&gt;</code> before, but I don’t know that there are many cases where I would use them rather than a more custom, non <code>&lt;table&gt;</code> design.</p>\n<div class=\"table-wrapper\">\n<table id=\"weird-table\">\n    <caption>\n        A table with a custom CSS\n    </caption>\n    <colgroup>\n        <col>\n        <col span=\"2\" class=\"low-numbers\">\n        <col span=\"2\">\n        <col span=\"2\" class=\"high-numbers\">\n    </colgroup>\n    <thead>\n        <tr>\n            <th scope=\"row\">Number</th>\n            <th>1</th>\n            <th>2</th>\n            <th>3</th>\n            <th>4</th>\n            <th>5</th>\n            <th>6</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <th scope=\"row\">Emoji</th>\n            <td>1️⃣</td>\n            <td>2️⃣</td>\n            <td>3️⃣</td>\n            <td>4️⃣</td>\n            <td>5️⃣</td>\n            <td>6️⃣</td>\n        </tr>\n        <tr>\n            <th scope=\"row\">Emoji with leaves</th>\n            <td rowspan=\"2\">🥭</td>\n            <td>🌱</td>\n            <td>🍂</td>\n            <td>🍀</td>\n            <td>🪴</td>\n            <td></td>\n        </tr>\n        <tr>\n            <th scope=\"row\">Emoji with fruit</th>\n            <td>🍒</td>\n            <td>🫐</td>\n            <td></td>\n            <td></td>\n            <td></td>\n        </tr>\n        <tr>\n            <th scope=\"row\">Emoji with slices</th>\n            <td>🍰</td>\n            <td>🥪</td>\n            <td></td>\n            <td>🥒</td>\n            <td></td>\n            <td></td>\n        </tr>\n    </tbody>\n    <tfoot>\n        <tr>\n            <th scope=\"row\">Totals</th>\n            <td>4</td>\n            <td>4</td>\n            <td>3</td>\n            <td>3</td>\n            <td>2</td>\n            <td>1</td>\n        </tr>\n    </tfoot>\n</table>\n</div>\n</section>\n<section id=\"forms\">\n<h3>Forms</h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button\"><code>&lt;button&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist\"><code>&lt;datalist&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset\"><code>&lt;fieldset&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form\"><code>&lt;form&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\"><code>&lt;input&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label\"><code>&lt;label&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend\"><code>&lt;legend&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter\"><code>&lt;meter&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup\"><code>&lt;optgroup&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option\"><code>&lt;option&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output\"><code>&lt;output&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress\"><code>&lt;progress&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea\"><code>&lt;textarea&gt;</code></a></li>\n</ul>\n<p>I have usually used <code>&lt;form&gt;</code> and it’s associated elements when submitting the form would redirect to a new page, not for in-page user interaction, but either is valid. I would guess the form elements are probably the most important for accessibility so I will likely refer to the documentation whenever implementing one in the future.</p>\n<p><label for=\"everything-form\">Fill out this form and scroll down to get an emoji surprise below!</label></p>\n<form id=\"everything-form\">\n<div id=\"eform-type\">\n<label for=\"type-choice\">Choose an emoji type:</label>\n<input list=\"emoji-types\" id=\"type-choice\" name=\"type-choice\">\n<datalist id=\"emoji-types\">\n<option value=\"Fruit\">\n</option><option value=\"Dessert\">\n</option><option value=\"Drinks\">\n</option><option value=\"Animals\">\n</option></datalist>\n</div>\n<div id=\"eform-size\">\n<fieldset id=\"size-choice\">\n<legend>Select a size:</legend>\n<input type=\"radio\" name=\"size-choice\" id=\"small-size-choice\" value=\"small\">\n<label for=\"small-size-choice\">Small</label>\n<input type=\"radio\" name=\"size-choice\" id=\"large-size-choice\" value=\"large\">\n<label for=\"large-size-choice\">Large</label>\n</fieldset>\n<label for=\"eform-size-meter\">Size Meter:</label>\n<meter id=\"eform-size-meter\" min=\"0\" max=\"2\" low=\"1\" high=\"2\" optimum=\"2\">\n</meter>\n</div>\n<div id=\"eform-color\">\n<label for=\"color-choice\">Color:</label>\n<select id=\"color-choice\">\n    <option value=\"\" disabled=\"\" selected=\"\">--Please choose an option--</option>\n    <optgroup label=\"Hot\">\n        <option>Orange</option>\n        <option>Red</option>\n        <option>Yellow</option>\n    </optgroup>\n    <optgroup label=\"Cool\">\n        <option>Blue</option>\n        <option>Green</option>\n    </optgroup>\n</select>\n</div>\n<div id=\"eform-dream\">\n<label for=\"dream-input\">Share a dream <span id=\"dream-secret\">(secret!)</span></label>\n<textarea id=\"dream-input\" cols=\"1\" rows=\"10\" wrap=\"hard\" name=\"dream-input\" placeholder=\"😶‍🌫️\"></textarea>\n</div>\n<br>\n<label for=\"form-completion\" id=\"form-completion-label\">Form completion:</label>\n<progress id=\"form-completion\" max=\"4\" value=\"0\">\n       0/4\n</progress>\n<br>\n<button id=\"eform-submit-button\" type=\"submit\" disabled=\"\">submit</button>\n</form>\n<h4>Your emoji:</h4>\n<output id=\"everything-output\" form=\"everything-form\" for=\"type-choice small-size-choice large-size-choice color-choice\" name=\"everything-output\"> </output>\n<p><noscript>Without JavaScript enabled the form above will not be interactive.</noscript></p>\n<script>\n    const eform = document.getElementById(\"everything-form\");\n    const eOutput = document.getElementById(\"everything-output\");\n    const typeChoice = document.getElementById(\"type-choice\");\n    const sizeChoice = document.getElementById(\"size-choice\");\n    const sizeMeter = document.getElementById(\"eform-size-meter\")\n    const colorChoice = document.getElementById(\"color-choice\");\n    const dreamInput = document.getElementById(\"dream-input\");\n    const formCompletion = document.getElementById(\"form-completion\");\n    const eformSubmit = document.getElementById(\"eform-submit-button\");\n    let selectedEmoji = \"❌\";\n    let selectedEmojiName = \"Form Incomplete\";\n    eform.addEventListener(\"submit\", (event) => {\n        event.preventDefault();\n        const el = event?.target?.elements;\n        const type = el?.[\"type-choice\"]?.value;\n        const size = el?.[\"size-choice\"]?.value;\n        const color = el?.[\"color-choice\"]?.value;\n        const selected = selectEmoji(type, size, color);\n        selectedEmoji = selected.emoji;\n        selectedEmojiName = selected.name;\n        eOutput.value = `${selectedEmoji}: ${selectedEmojiName}`;\n    })\n    const fields = {\n        \"type-choice\": 0,\n        \"small-size-choice\": 1,\n        \"large-size-choice\": 1,\n        \"color-choice\": 2,\n        \"dream-input\": 3,\n    }\n    const complete = [0, 0, 0, 0];\n    eformSubmit.disabled = false;\n    function fillForm(event) {\n        const value = event?.target?.value\n        const idShort = event?.target?.id?.slice(0, 3) ?? null;\n        complete[fields[event?.target?.id]] = event?.target?.value ? 1 : 0;\n        const newCompletion = complete.reduce((a,c) => a + c, 0);\n        formCompletion.value = newCompletion\n        formCompletion.innerHTML = `${newCompletion}/4`\n    }\n    typeChoice.addEventListener(\"input\", fillForm);\n    sizeChoice.addEventListener(\"input\", fillForm);\n    colorChoice.addEventListener(\"input\", fillForm);\n    dreamInput.addEventListener(\"input\", fillForm);\n    sizeChoice.addEventListener(\"input\", (event) => {\n        const idShort = event.target.id.slice(0, 3);\n        const v = { sma: 1, lar: 2 }\n        sizeMeter.value = v?.[idShort] ?? 0;\n    })\n    function selectEmoji(type, size, color) {\n        if (type === \"Fruit\") {\n            if (color === \"Orange\") {\n                if (size === \"small\") {\n                    return { emoji: \"🍊\", name: \"tangerine\" }\n                } else if (size === \"large\") {\n                    return { emoji: \"🍑\", name: \"peach\" }\n                }\n            } else if (color === \"Red\") {\n                if (size === \"small\") {\n                    return { emoji: \"🍓\", name: \"Strawberry\" }\n                } else if (size === \"large\") {\n                    return { emoji: \"🍎\", name: \"Apple\" }\n                }\n            } else if (color === \"Yellow\") {\n                if (size === \"small\") {\n                    return { emoji: \"🍋\", name: \"Lemon\" }\n                } else if (size === \"large\") {\n                    return { emoji: \"🍌\", name: \"Banana\" }\n                }\n            } else if (color === \"Blue\") {\n                if (size === \"small\") {\n                    return { emoji: \"🫐\", name: \"Blueberry\" }\n                } else if (size === \"large\") {\n                    return { emoji: \"🥥\", name: \"Coconut\" }\n                }\n            } else if (color === \"Green\") {\n                if (size === \"small\") {\n                    return { emoji: \"🥝\", name: \"Kiwi\" }\n                } else if (size === \"large\") {\n                    return { emoji: \"🍐\", name: \"Pear\" }\n                }\n            }\n        } else if (type === \"Dessert\") {\n            if (color === \"Orange\") {\n                if (size === \"small\") {\n                    return { emoji: \"🥮\", name: \"Mooncake\" }\n                } else if (size === \"large\") {\n                    return { emoji: \"🥧\", name: \"Pie\" }\n                }\n            } else if (color === \"Red\") {\n                if (size === \"small\") {\n                    return { emoji: \"🍫\", name: \"Chocolate\" }\n                } else if (size === \"large\") {\n                    return { emoji: \"🍧\", name: \"Shaved Ice\" }\n                }\n            } else if (color === \"Yellow\") {\n                if (size === \"small\") {\n                    return { emoji: \"🍨\", name: \"Ice Cream\" }\n                } else if (size === \"large\") {\n                    return { emoji: \"🍰\", name: \"Cake\" }\n                }\n            } else if (color === \"Blue\") {\n                if (size === \"small\") {\n                    return { emoji: \"🍬\", name: \"Candy\" }\n                } else if (size === \"large\") {\n                    return { emoji: \"🍭\", name: \"Lollipop\" }\n                }\n            } else if (color === \"Green\") {\n                if (size === \"small\") {\n                    return { emoji: \"🍡\", name: \"Dango\" }\n                } else if (size === \"large\") {\n                    return { emoji: \"🥗\", name: \"Dessert Salad\" }\n                }\n            }\n        } else if (type === \"Drinks\") {\n            if (color === \"Orange\") {\n                if (size === \"small\") {\n                    return { emoji: \"🍺\", name: \"Beer\" }\n                } else if (size === \"large\") {\n                    return { emoji: \"🍻\", name: \"Two Beers\" }\n                }\n            } else if (color === \"Red\") {\n                if (size === \"small\") {\n                    return { emoji: \"🍷\", name: \"Wine\" }\n                } else if (size === \"large\") {\n                    return { emoji: \"🥤\", name: \"Big Soda Cup\" }\n                }\n            } else if (color === \"Yellow\") {\n                if (size === \"small\") {\n                    return { emoji: \"🥂\", name: \"Champagne Flute\" }\n                } else if (size === \"large\") {\n                    return { emoji: \"🍹\", name: \"Cocktail\" }\n                }\n            } else if (color === \"Blue\") {\n                if (size === \"small\") {\n                    return { emoji: \"🍶\", name: \"Sake\" }\n                } else if (size === \"large\") {\n                    return { emoji: \"🍶\", name: \"Sake\" }\n                }\n            } else if (color === \"Green\") {\n                if (size === \"small\") {\n                    return { emoji: \"🧃\", name: \"Juice Box\" }\n                } else if (size === \"large\") {\n                    return { emoji: \"🍾\", name: \"Champagne Bottle\" }\n                }\n            }\n        } else if (type === \"Animals\") {\n            if (color === \"Orange\") {\n                if (size === \"small\") {\n                    return { emoji: \"🦊\", name: \"Fox\" }\n                } else if (size === \"large\") {\n                    return { emoji: \"🐅\", name: \"Tiger\" }\n                }\n            } else if (color === \"Red\") {\n                if (size === \"small\") {\n                    return { emoji: \"🦀\", name: \"Crab\" }\n                } else if (size === \"large\") {\n                    return { emoji: \"🦑\", name: \"Squid\" }\n                }\n            } else if (color === \"Yellow\") {\n                if (size === \"small\") {\n                    return { emoji: \"🐝\", name: \"Bee\" }\n                } else if (size === \"large\") {\n                    return { emoji: \"🐱\", name: \"Cat\" }\n                }\n            } else if (color === \"Blue\") {\n                if (size === \"small\") {\n                    return { emoji: \"🦋\", name: \"Butterfly\" }\n                } else if (size === \"large\") {\n                    return { emoji: \"🐋\", name: \"Whale\" }\n                }\n            } else if (color === \"Green\") {\n                if (size === \"small\") {\n                    return { emoji: \"🐸\", name: \"Frog\" }\n                } else if (size === \"large\") {\n                    return { emoji: \"🐊\", name: \"Crocodile\" }\n                }\n            }\n        }\n        return { emoji:\"❌\", name: \"Invalid Submission\" };\n    }\n</script>\n</section>\n<section id=\"interactive-elements\">\n<h3>Interactive Elements</h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details\"><code>&lt;details&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog\"><code>&lt;dialog&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary\"><code>&lt;summary&gt;</code></a></li>\n</ul>\n<p>The <code>&lt;details&gt;</code> and <code>&lt;summary&gt;</code> combination is probably the most common, “You don’t need JavaScript to…” element (another <a href=\"https://catskull.net/html.html\" target=\"_blank\">popular blog</a> post making this point prompted me to finally finish this one). Making this kind of expand/collapse interactive view was one of the first things I used JavaScript for (it was probably jQuery). I remember it being somewhat confusing at the time (2006?), so it’s funny to me to see it so easy with just a couple HTML tags.</p>\n<details>\n  <summary>Speculation about <code>&lt;details&gt;</code></summary>\n  <div>I do wonder if <code>&lt;details&gt;</code> and <code>&lt;summary&gt;</code> were being considered for the HTML spec today, if they would be withdrawn in favor of a similar effect using CSS.</div>\n</details>\n<p>I wasn’t aware of the HTML only <code>&lt;dialog&gt;</code> before using it here. It requires JavaScript to be useful beyond just its stylistic impact, but it’s an interesting way to create interactions that are more custom than <code>alert()</code>, but still simple, because while <code>alert()</code> is styled by the browser <code>&lt;dialog&gt;</code> can be styled with CSS.</p>\n<dialog open=\"\">\n  <p>Guess who?!</p>\n  <form method=\"dialog\">\n    <button>Reveal!</button>\n  </form>\n</dialog>\n<pre id=\"palm-sheriff\" role=\"img\" aria-label=\"A sheriff whose body is made of palm trees.\">\n       🤠\n     🌴🌴🌴\n   🌴  🌴  🌴\n   👇 🌴 🌴 👇\n　 　 🌴 🌴\n　 　 🌴 🌴\n　 　 👢 👢\n  the palm sheriff\n</pre>\n</section>\n<section id=\"web-components\">\n<h3>Web Components</h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot\"><code>&lt;slot&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template\"><code>&lt;template&gt;</code></a></li>\n</ul>\n<p>Web components had been on a (long) list of “things I should learn more about” for a while, so I was glad to get to this section of the MDN documentation. I was surprised that JavaScript (and <code>Class</code> syntax at that) was necessary to get web components to render, but after reading more about the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_shadow_DOM\">Shadow DOM</a>, it makes sense, because HTML has no built in way to encapsulate styles, though it does seem to be somewhat similar conceptually to <code>&lt;iframe&gt;</code> elements.</p>\n<p>I’ve used web components below to create a table of contents for this post below, though I’m not making the best use of them. One thing I couldn’t quickly figure out how to do, when compared to components from frontend frameworks, is pass in properties that are themselves used as properties of elements in the child template, so in the list below I have to pass a full <code>&lt;a&gt;</code> element into each child (which renders the <code>&lt;li&gt;</code>), to be able to set the correct <code>href</code> property. Someday after finishing this post I will read more about web components and maybe figure out something I’m missing now.</p>\n<template id=\"table-of-contents-item\">\n    <li><slot name=\"emoji\">✅</slot> <slot name=\"table-of-contents-link\">End of List</slot>\n</li></template>\n<template id=\"table-of-contents\">\n    <style>\n        .table-of-contents {\n            border: 2px solid var(--text-2);\n            border-radius: 5px;\n            padding: 5px 10px;\n            background: rgb(255,252,234);\n            background: linear-gradient(324deg, rgba(255,252,234,1) 0%, rgba(249,239,255,1) 21%, rgba(255,239,231,1) 100%);\n            display: inline-block;\n            min-width: 300px;\n            width: 80%;\n            margin: 0 10%;\n        }\n        .table-of-contents h4 {\n            margin: 0.5rem 0;\n            font-size: 1.6rem;\n            line-height: 1.8rem;\n        }\n    </style>\n    <div class=\"table-of-contents\">\n        <h4>Table of Contents</h4>\n        <ul>\n            <table-of-contents-item>\n                <span slot=\"emoji\">📜</span>\n                <a slot=\"table-of-contents-link\" href=\"https://patrickweaver.net/blog/a-blog-post-with-every-html-element/#main-root\">Main Root</a>\n            </table-of-contents-item>\n            <table-of-contents-item>\n                <span slot=\"emoji\">📑</span>\n                <a slot=\"table-of-contents-link\" href=\"https://patrickweaver.net/blog/a-blog-post-with-every-html-element/#document-metadata\">Document Metadata</a>\n            </table-of-contents-item>\n            <table-of-contents-item>\n                <span slot=\"emoji\">📂</span>\n                <a slot=\"table-of-contents-link\" href=\"https://patrickweaver.net/blog/a-blog-post-with-every-html-element/#sectioning-root\">Sectioning Root</a>\n            </table-of-contents-item>\n            <table-of-contents-item>\n                <span slot=\"emoji\">🗂</span>\n                <a slot=\"table-of-contents-link\" href=\"https://patrickweaver.net/blog/a-blog-post-with-every-html-element/#content-sectioning\">Content Sectioning</a>\n            </table-of-contents-item>\n            <table-of-contents-item>\n                <span slot=\"emoji\">🔡</span>\n                <a slot=\"table-of-contents-link\" href=\"https://patrickweaver.net/blog/a-blog-post-with-every-html-element/#text-content\">Text Content</a>\n            </table-of-contents-item>\n            <table-of-contents-item>\n                <span slot=\"emoji\">📝</span>\n                <a slot=\"table-of-contents-link\" href=\"https://patrickweaver.net/blog/a-blog-post-with-every-html-element/#inline-text-semantics\">Inline Text Semantics</a>\n            </table-of-contents-item>\n            <table-of-contents-item>\n                <span slot=\"emoji\">🖼</span>\n                <a slot=\"table-of-contents-link\" href=\"https://patrickweaver.net/blog/a-blog-post-with-every-html-element/#image-and-multimedia\">Image and Multimedia</a>\n            </table-of-contents-item>\n            <table-of-contents-item>\n                <span slot=\"emoji\">🪟</span>\n                <a slot=\"table-of-contents-link\" href=\"https://patrickweaver.net/blog/a-blog-post-with-every-html-element/#embedded-content\">Embedded Content</a>\n            </table-of-contents-item>\n            <table-of-contents-item>\n                <span slot=\"emoji\">🧮</span>\n                <a slot=\"table-of-contents-link\" href=\"https://patrickweaver.net/blog/a-blog-post-with-every-html-element/#svg-and-mathml\">SVG and MathML</a>\n            </table-of-contents-item>\n            <table-of-contents-item>\n                <span slot=\"emoji\">🪄</span>\n                <a slot=\"table-of-contents-link\" href=\"https://patrickweaver.net/blog/a-blog-post-with-every-html-element/#scripting\">Scripting</a>\n            </table-of-contents-item>\n            <table-of-contents-item>\n                <span slot=\"emoji\">🛠</span>\n                <a slot=\"table-of-contents-link\" href=\"https://patrickweaver.net/blog/a-blog-post-with-every-html-element/#demarcating-edits\">Demarcating Edits</a>\n            </table-of-contents-item>\n            <table-of-contents-item>\n                <span slot=\"emoji\">📦</span>\n                <a slot=\"table-of-contents-link\" href=\"https://patrickweaver.net/blog/a-blog-post-with-every-html-element/#table-content\">Table Content</a>\n            </table-of-contents-item>\n            <table-of-contents-item>\n                <span slot=\"emoji\">📋</span>\n                <a slot=\"table-of-contents-link\" href=\"https://patrickweaver.net/blog/a-blog-post-with-every-html-element/#forms\">Forms</a>\n            </table-of-contents-item>\n            <table-of-contents-item>\n                <span slot=\"emoji\">🛝</span>\n                <a slot=\"table-of-contents-link\" href=\"https://patrickweaver.net/blog/a-blog-post-with-every-html-element/#interactive-elements\">Interactive Elements</a>\n            </table-of-contents-item>\n            <table-of-contents-item>\n                <span slot=\"emoji\">🕸</span>\n                <a slot=\"table-of-contents-link\" href=\"https://patrickweaver.net/blog/a-blog-post-with-every-html-element/#web-components\">Web Components</a>\n            </table-of-contents-item>\n            <table-of-contents-item>\n                <span slot=\"emoji\">📠</span>\n                <a slot=\"table-of-contents-link\" href=\"https://patrickweaver.net/blog/a-blog-post-with-every-html-element/\"></a>\n            </table-of-contents-item>\n            <table-of-contents-item>\n            </table-of-contents-item>\n        </ul>\n    </div>\n</template>\n<script>\n    customElements.define(\"table-of-contents-item\", class extends HTMLElement {\n        constructor() {\n            super();\n            let template = document.getElementById(\"table-of-contents-item\");\n            let templateContent = template.content;\n            const shadowRoot = this.attachShadow({ mode: \"open\" });\n            shadowRoot.appendChild(templateContent.cloneNode(true));\n        }\n    });\n    customElements.define(\"table-of-contents\", class extends HTMLElement {\n        constructor() {\n            super();\n            let template = document.getElementById(\"table-of-contents\");\n            let templateContent = template.content;\n            const shadowRoot = this.attachShadow({ mode: \"open\" });\n            shadowRoot.appendChild(templateContent.cloneNode(true));\n        }\n    });\n</script>\n<p><table-of-contents></table-of-contents></p>\n<p><noscript>Without JavaScript enabled components above will not render.</noscript></p>\n</section>\n<section id=\"obsolete-and-deprecated-elements\">\n<h3>Obsolete and Deprecated Elements</h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/acronym\"><code>&lt;acronym&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/big\"><code>&lt;big&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/center\"><code>&lt;center&gt;</code></a></li>\n<li><code>&lt;content&gt;</code></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dir\"><code>&lt;dir&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font\"><code>&lt;font&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/frame\"><code>&lt;frame&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/frameset\"><code>&lt;frameset&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/image\"><code>&lt;image&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/marquee\"><code>&lt;marquee&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menuitem\"><code>&lt;menuitem&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nobr\"><code>&lt;nobr&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noembed\"><code>&lt;noembed&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noframes\"><code>&lt;noframes&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/param\"><code>&lt;param&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/plaintext\"><code>&lt;plaintext&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rb\"><code>&lt;rb&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rtc\"><code>&lt;rtc&gt;</code></a></li>\n<li><code>&lt;shadow&gt;</code></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strike\"><code>&lt;strike&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tt\"><code>&lt;tt&gt;</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/xmp\"><code>&lt;xmp&gt;</code></a></li>\n</ul>\n<p>There are of course a few <big>deprecated</big> <acronym title=\"HyperText Markup Language\">HTML</acronym> elements, so why not <font color=\"#2FCF6F\" face=\"times\" size=\"5\">include</font> them here at the end.</p>\n<p>Everyone’s favorite is of course,</p>\n<center><code>&lt;marquee&gt;</code></center>\n<p><marquee>Hello!</marquee></p>\n<p>Many of the elements, like <code>&lt;big&gt;</code>, <code>&lt;acronym&gt;</code>, <code>&lt;font&gt;</code> (used above), <code>&lt;nobr&gt;</code> and <code>&lt;strike&gt;</code> are examples of layout related functionality that has been moved to CSS rather than <strike>have HTML handle it</strike>. The narrow box below has an example of <code>&lt;nobr&gt;</code>:</p>\n<div id=\"nobr-box\">\n    <nobr>This sentence is wrapped in a <code>&lt;nobr&gt;</code>.</nobr>\n    <p>This sentence is wrapped in a <code>&lt;p&gt;</code>.</p>\n    <p style=\"white-space: nowrap;\">This sentence is wrapped in a <code>&lt;p&gt;</code> with <code>style=\"white-space: nowrap;\"</code>.</p>\n</div>\n<p>There are some other strange ones as well though. I couldn’t implement <code>&lt;content&gt;</code> and <code>&lt;shadow&gt;</code> here because they were never fully implemented part of the web components spec. I’ll add some below anyway though.</p>\n<figure>\n<shadow></shadow>\n<content></content>\n<figcaption><code>&lt;shadow&gt;</code> and <code>&lt;content&gt;</code> elements (that won’t render).</figcaption>\n</figure>\n<p>And <code>&lt;dir&gt;</code> is a very <i>webserver</i> version of <code>&lt;ul&gt;</code> for listing directories. Since my Eleventy static site generator does use directories here’s a list:</p>\n<dir>\n    <li><a href=\"https://patrickweaver.net/blog\">/blog</a></li>\n    <li><a href=\"https://patrickweaver.net/css\">/css</a></li>\n    <li><a href=\"https://patrickweaver.net/images\">/images</a></li>\n    <li><a href=\"https://patrickweaver.net/notes\">/notes</a></li>\n    <li><a href=\"https://patrickweaver.net/pages\">/pages</a></li>\n    <li><a href=\"https://patrickweaver.net/portfolio\">/portfolio</a></li>\n</dir>\n<p>Some of deprecated elements won’t render without some extra work, for example <code>&lt;frame&gt;</code> and <code>&lt;frameset&gt;</code> are designed to be used instead of a <code>&lt;body&gt;</code>, for I guess some kind of collage web page made up of other pages. I’ve ironically only been able to use them inside of an <code>&lt;iframe&gt;</code> below.</p>\n<figure>\n<iframe width=\"300\" height=\"300\" src=\"https://patrickweaver.net/pages/frameset\"></iframe>\n<figcaption>An embed of a <a href=\"https://patrickweaver.net/pages/frameset\" target=\"_blank\">page</a> with <code>&lt;frameset&gt;</code> and <code>&lt;frame&gt;</code> elements that itself embeds the Links page of this site.\n</figcaption></figure>\n<p>I expected that <code>&lt;image&gt;</code> wouldn’t work since the MDN documentation says:</p>\n<blockquote cite=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/image\">\n    This does not appear to have been part of any formal specification. It was mentioned in HTML+ Discussion Document - Dave Raggett, November 8, 1993 (Section 5.9 - Images), but was not part of the first revision of HyperText Markup Language Specification - 2.0 in 1994.\n</blockquote>\n<p>But it does seem to work in some browsers in 2023, though this might be just a fallback for potential confusion with <code>&lt;img&gt;</code>.</p>\n<p><image src=\"/images/blog/html/fax.png\" width=\"100\">An icon of a fax machine</image></p>\n<p>One of the more interesting browser compatibility stories of the deprecated elements is <code>&lt;menuitem&gt;</code>, which supposedly was <a href=\"https://caniuse.com/?search=menuitem\">partially supported in Firefox versions 8 - 84</a>, but I couldn’t get <a href=\"https://www.w3schools.com/tags/tryit.asp?filename=tryhtml5_menuitem\">an example</a> to work in any of the older versions I installed locally (even with editing <code>about:config</code>). The examples imply that the <code>&lt;menu&gt;</code> (of <code>type=context</code>) and child <code>&lt;menuitem&gt;</code> elements shouldn’t render until the element whose <code>contextmenu</code> property is right clicked, but as you can see below, the items always render:</p>\n<div id=\"menu-button\" contextmenu=\"menuitem-example\">Open Menu</div>\n<menu type=\"context\" id=\"menuitem-example\">\n    <menuitem type=\"radio\" radiogroup=\"group1\">Radio Button 1\n    <menuitem type=\"radio\" radiogroup=\"group1\">Radio Button 2\n</menu>\n<p>It’s surprising that <code>&lt;noembed&gt;</code>, essentially a <code>&lt;noscript&gt;</code> style fallback, was deprecated while <code>&lt;embed&gt;</code> was kept in the spec. Here’s my <code>&lt;embed&gt;</code> from above, but this time with a <code>&lt;noembed&gt;</code> child. There is also <code>&lt;noframes&gt;</code> which I included above with the <code>&lt;frame&gt;</code> element.</p>\n<figure>\n<embed type=\"video/mp4\" src=\"https://patrickweaver.net/images/blog/html/audio-and-video-tags.mp4\" width=\"165\" height=\"100\" title=\"A screen recording of my dev setup while writing the paragraph above.\" id=\"audio-and-video-tags-embed-dep\"><noembed>An embed of a screen recording of my dev setup while writing the paragraph above.</noembed>\n<figcaption>An <code>&lt;embed&gt;</code> with a <code>&lt;noembed&gt;</code> tag child.</figcaption>\n</figure>\n<p>It’s unclear why <code>&lt;param&gt;</code> ever existed instead of just using attributes on the <code>&lt;object&gt;</code> element. When I started this blog post <a href=\"https://web.archive.org/web/20220330125752/https://developer.mozilla.org/en-US/docs/Web/HTML/Element\">it was listed in the “Embedding Content” section</a>, but by the time I finished it was deprecated. Here is one below:</p>\n<figure>\n<object type=\"video/mp4\" data=\"https://patrickweaver.net/images/blog/html/audio-and-video-tags.mp4\" width=\"165\" height=\"100\" id=\"audio-and-video-tags-object-dep\">\n<img src=\"https://patrickweaver.net/images/blog/html/audio-and-video-tags-poster.jpg\" alt=\"a still of a screen recording\">\n<param name=\"cool-param\">\n</object>\n<figcaption>An <code>&lt;object&gt;</code> with a <code>&lt;param&gt;</code> tag child.</figcaption>\n</figure>\n<p><code>&lt;plaintext&gt;</code> is another weird one, and notable among the deprecated elements in that it works. It is another one I am going to have to wrap in an <code>&lt;iframe&gt;</code> because otherwise the rest of the page would be rendered as the source code:</p>\n<figure>\n<iframe width=\"350\" height=\"400\" src=\"https://patrickweaver.net/pages/plaintext-element\"></iframe>\n<figcaption>An embed of a <a href=\"https://patrickweaver.net/pages/plaintext-element/\" target=\"_blank\">page</a> with a <code>&lt;plaintext&gt;</code> element.\n</figcaption></figure>\n<p>However, <code>&lt;xmp&gt;</code> and <code>&lt;tt&gt;</code>, used in a similar way, have closing tags <xmp style=\"max-width: 100%; overflow: scroll; padding: 0.5rem 0; border: 1px solid #aaa; background-color: #eee;\">\nso they can be used here for displaying source code\n</xmp> or text in a monospace font<tt>\n<span id=\"tt-element\">as it would be shown on a teletype</span>\n</tt> without an <code>&lt;iframe&gt;</code>.</p>\n<p>A few of the deprecated elements have just been replaced by newer additions to the spec. <code>&lt;rb&gt;</code> and <code>&lt;rtc&gt;</code> were used for displaying pronunciation of East Asian characters, but it seems like the spec was simplified. Here is the example from MDN:</p>\n<p><ruby xml:lang=\"zh-Hant\" style=\"ruby-position: under;\"><rbc><rb>馬</rb><rp>(</rp><rt>mǎ</rt><rp>)</rp><rb>來</rb><rp>(</rp><rt>lái</rt><rp>)</rp><rb>西</rb><rp>(</rp><rt>xī</rt><rp>)</rp><rb>亞</rb><rp>(</rp><rt>yà</rt><rp>)</rp></rbc><rtc xml:lang=\"en\" style=\"ruby-position: over;\"><rp>(</rp><rt>Malaysia</rt><rp>)</rp></rtc></ruby></p>\n</section>\n<section id=\"other-elements\">\n<h3>Other Elements</h3>\n<p>I consulted a few other lists of HTML tags after realizing that the <code>&lt;!-- comment --&gt;</code> tag wasn’t in my list from MDN (there’s one below this paragraph)</p>\n<!-- The only reference to HTML comments on MDN seems to be in the web APIs section: https://developer.mozilla.org/en-US/docs/Web/API/Comment -->\n<p>An <a href=\"https://web.archive.org/web/20130520111045/https://developer.mozilla.org/en-US/docs/Web/HTML/Element\" target=\"_blank\">older list from MDN in 2013</a> has elements like <code>&lt;blink&gt;</code>, and for accessibility reasons, <q cite=\"https://web.archive.org/web/20130520111045/https://developer.mozilla.org/en-US/docs/Web/HTML/Element\">almost all browsers currently ignore this element.</q> I’ll add one hidden below if you can find a very old browser that supports it:</p>\n<div style=\"display: none\" id=\"hidden-blink\">\n    <blink>I am in a <code>&lt;blink&gt;</code> tag (but probably not blinking).</blink>\n</div>\n<div id=\"show-blink-button-container\">\n    <button onclick=\"(() => document.getElementById('hidden-blink').style.display = 'block')();\">Show <code class=\"code-regular\">&lt;blink&gt;</code></button>\n</div>\n<p>Also on the list is <code>&lt;spacer&gt;</code>, which doesn’t work in modern browsers and,</p>\n<p><spacer type=\"horizontal\" size=\"30\"></spacer></p>\n<p>would now be done</p>\n<div style=\"height: 30px;\"></div>\n<p>with CSS.</p>\n<p>Then there’s others like <code>&lt;bgsound&gt;</code> (<a href=\"https://web.archive.org/web/20131004002320/https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bgsound\" target=\"_blank\">2013 docs</a>) that seems to have never been implemented (except maybe in Netscape?), but alludes to a vision for a much more <em>multimedia</em> enabled web documents, and <code>&lt;isindex&gt;</code> (<a href=\"https://web.archive.org/web/20130916195848/https://developer.mozilla.org/en-US/docs/Web/HTML/Element/isindex\" target=\"_blank\">2013 docs</a>) which seems like it is from a world where JavaScript doesn’t exist.</p>\n<p>Another attempt at <code>&lt;xmp&gt;</code>, <code>&lt;tt&gt;</code>, <code>&lt;code&gt;</code> was</p>\n<p><listing><span id=\"listing-child\">listing</span></listing></p>\n<p>I’m surprised it seems to still work!</p>\n<p>And of course <code>&lt;applet&gt;</code>, but I’m not even going to try with that one.</p>\n</section>\n<h4>Footnotes</h4>\n<ol class=\"footnotes\">\n    <li id=\"footnote-1\"><aside>Which I am just now discovering there is no native HTML implementation for!</aside> <a href=\"https://patrickweaver.net/blog/a-blog-post-with-every-html-element/#footnote-1-link\">↑ Return to post</a></li>\n</ol>\n<footer role=\"contentinfo\">\n    Written between <time datetime=\"2022-02\">February 2022</time> and <time datetime=\"2023-08\">August 2023</time>.\n</footer>\n",
      "date_published": "2023-08-03T00:00:00Z"
    }
    ,
    {
      "id": "https://patrickweaver.net/blog/alphabetic-internet-time/",
      "url": "https://patrickweaver.net/blog/alphabetic-internet-time/",
      "title": "Alphabetic Internet Time: A Time Zone for the Internet",
      "content_html": "<p>In the Fall of 2020 I <a href=\"https://www.patrickweaver.net/blog/a-recurse-center-remote-batch/\">participated in a 12 week batch</a> at the <a href=\"https://recurse.com\">Recurse Center</a>. While I had a lot of previous experience <em>working</em> remotely, both before and during the pandemic, RC was the first time where I was communicating with people in more than 1 or 2 other time zones. I now work at a fully remote company, mostly spread over the 4(ish) U.S. time zones, but with a few people permanently or temporarily in other places.</p>\n<h4>Communicating across time zones</h4>\n<p>RC when I was there (mostly I would guess because their software was designed and configured for in person retreats in NYC) operated for the most part in Eastern Time, although I see from my limited participation in the community as an alum that this may have shifted, especially thanks to <a href=\"https://zulip.com/help/format-your-message-using-markdown#global-times\">Zulip’s time-zone-relative timestamp support</a>. RC had transitioned to hosting Recursers remotely a few months before my batch, which is how they continue to operate now in Summer 2022. At my current job we often default to either Eastern Time or Pacific Time, but some people will also just use their local time and let others figure it out.</p>\n<p>Out of politeness and miscalculation-anxiety reducing redundancy I often will use multiple time zones, for example when proposing a meeting I might say, <em>“Let’s meet at 🗽 12:30 PM ET / 🏔 10:30 AM MT / 🌁 9:30 AM PT,”</em> (I’m still searching for a good Central Time emoji, 🛣 🌽 🌪 are the best I’ve got), but time zone based confusion often takes more thinking than it should.</p>\n<p>(Side note, it bewilders me that Slack still doesn’t have something similar to Zulip’s <em>“you write in your time zone, they read in their time zone”</em> timestamp support in 2022. 🙃)</p>\n<h4>Time zones are pretty confusing, DST makes them worse</h4>\n<p>Something that probably doesn’t cause very much confusion for most other people, but I can’t help but consistently notice is that most people exclusively use ”EST/CST/MST/PST” throughout the year, even during the Spring, Summer, and Fall, when most of the U.S. is observing Daylight Saving Time. This linguistic pattern (which I assume is somewhat caused by “EST” seeming like an abbreviation for “Eastern”) makes me especially curious what the commonly used abbreviations will be if the U.S. <a href=\"https://web.archive.org/web/20220315222718/https://www.nytimes.com/2022/03/15/us/politics/daylight-saving-time-senate.html\">switches to permanent DST</a>, and how people in Arizona, <a href=\"https://en.wikipedia.org/wiki/Time_in_Arizona\">which mostly does not observe DST</a> understand someone in Denver saying, “Let’s meet at 10:30 MST on August 14.” I would imagine them thinking something like, ”😫.”</p>\n<p>Even Google search seems to get this wrong as searching <a href=\"https://google.com/search?q=current%20time%20MST\">“current time MST”</a> at 8:39 PM EDT in NYC in August shows ”6:39 Mountain Time (MT)”, though I also wonder what the same search would show in Arizona.</p>\n<h4>A time zone for the internet</h4>\n<p>All of this leads to my Alphabetic Internet Time (AIT), which I consider <em>“A Great Idea That Will Never Work.”</em> AIT is essentially UTC, but with the letters A through X of the (English) alphabet replacing the hour digits. Midnight UTC is A:00, Noon UTC is M:00, 1:34 PM UTC is N:34. Just like UTC, these times are not local, S:00 is the same moment everywhere (18:00 UTC). For someone in New York in August 2022 observing EDT, it is 2:00 PM, for the same person in January 2023 S:00 is 1:00 PM. For someone in San Francisco in August, S:00 is 11:00 AM.</p>\n<p>This may all sound confusing, but it’s mostly because AIT is not really useful at all for knowing what time it is somewhere else. The main goal of AIT is reducing the amount of time you spend thinking about what time it is somewhere else (though it is likely still polite to make sure you’re not trying to schedule something in the middle of someone else’s night). AIT starts to make sense when you think about people in different time zones communicating about something that will happen online. As someone who works normal business hours in NYC, my work day goes from N:00 (9 AM EDT) to V:00 (5 PM EDT), with lunch usually at Q:30 (though during the Winter it would be O:00 to W:00). If I’m planning with someone in San Francisco who also works normal business hours (Q:00 - A:00) and we want at least an hour, we could easily see that any time between R:00 and V:00 would work, and we would both know what time that was for us.</p>\n<p>If AIT were to work it wouldn’t rely on people manually calculating the current time, they would need clocks that display AIT like this reference implementation I made: <a href=\"https://doodles.patrickweaver.net/ait/\" target=\"_blank\">doodles.patrickweaver.net/ait/</a></p>\n<figure style=\"text-align: center; width: 100%;\">\n  <iframe id=\"ait-clock\" style=\"border: 1px solid black; margin: 1rem auto; height: 400px;\" title=\"Alphabetic Internet Time Clock\" width=\"400\" height=\"400\" src=\"https://doodles.patrickweaver.net/ait/\">\n  </iframe>\n  <figcaption>A reference implementation of an AIT clock at: <a href=\"https://doodles.patrickweaver.net/ait/\" target=\"_blank\">doodles.patrickweaver.net/ait/</a> </figcaption>\n</figure>\n<h4>Why not just use UTC?</h4>\n<p>People who are already used to using UTC might look at AIT and think that it’s just a confusing extra layer on top of a system that works pretty well, but in my opinion, moving whole communities of people to UTC would likely be very difficult because doing so asks them to do the same mental math as coordinating between time zones, but often with larger numbers.</p>\n<p>Even after changing my phone to use a 24 hour clock for weeks while spending time in countries where that is common I still found myself translating 16:00 to <em>“16 - 2 - 10 = 4 PM”</em> in my head. My guess is that for most people it would be easier to convert between two separate concepts, their local time with numbers, and AIT with letters, but I may be wrong. The other advantage is clarity, even if the known best practice is to use UTC, a message like “Let’s meet at 15:30” can still be unclear, potentially UTC, the sender’s local time, or your own!</p>\n<h4>Does anything like this exist?</h4>\n<p>The closest thing to AIT that currently exists is the <a href=\"https://en.wikipedia.org/wiki/List_of_military_time_zones\">Military Time Zones</a> which also use the alphabet to refer to time zones, but in a way that doesn’t make much sense. Like AIT the time zones move East from UTC with UTC+1 being “Alfa”, UTC+2 “Bravo”, and continuing through the NATO phonetic alphabet (though skipping “Juliett”) to UTC+12, “Mike”. However, rather than continue through the alphabet at UTC-11, “November” is back near where we started as UTC-1 (and continues moving West from there).</p>\n<p>The military time zone names do seem useful, and are possibly too similar to AIT for my idea to catch on, but out of sequence order make the concept seem too confusing for anyone using it for much beyond just “time zone names.”</p>\n<p>One interesting (and further confusing thing) about the military time zone names is that “Mike”, UTC+12 and “Yankee”, UTC-12 are the same time, but on different dates because the border straddles the international date line. It’s quirks like this that make me think that any improvement on time zone related communication is likely to fail.</p>\n<p><img src=\"https://patrickweaver.net/images/blog/ait/military-time-zones.jpg\" alt=\"A map of military time zones from the ACP 121(I) standard\"></p>\n<h4>Reasons why AIT will never work</h4>\n<p>As good an idea as I think this is, I have no hopes of AIT catching on mostly because I think that most people wouldn’t be able to get over the ridiculousness of saying “M:45” (and not being worried people would think they’re talking about a bus). But beyond the silliness, it’s still Daylight Saving Time that makes communicating across time zones unlikely to be improved on.</p>\n<p>If your own time zone stayed the same relative to AIT year round I think there would be a chance that, with tools like an AIT display next to your local time, or calendar integrations, that it would work for a lot of people who frequently communicate with people in other time zones, but having to switch recurring times back and forth by one letter twice a year seems like friction that would dampen most people’s enthusiasm.</p>\n<p>Bringing dates into the picture also seems like it would complicate things. Even though A:15 is 5:15 PM PDT in San Francisco, if we put a date on it, it would have to be “tomorrow” for the person in SF to match UTC. I don’t think that this would add any additional confusion to communicating with people whose time zone is in the next day relative to your own, but a new system like AIT would likely get blamed for the inherent awkwardness of time zones.</p>\n<p><img src=\"https://patrickweaver.net/images/blog/ait/sf-ny-sunset.jpg\" alt=\"Photographs of the sunset in San Francisco, CA, and New York, NY\"></p>\n<p>But who knows! Weirder ideas have caught on in the past, like Daylight Saving Time! Or, maybe we can all just join the UTC+8 “Hotel” time zone since almost 25% of the world population already lives in it!</p>\n<p>Aug 18, 2022 B:14, Brooklyn, NY</p>\n",
      "date_published": "2022-08-18T00:00:00Z"
    }
    ,
    {
      "id": "https://patrickweaver.net/blog/how-to-raspberry-pi-server/",
      "url": "https://patrickweaver.net/blog/how-to-raspberry-pi-server/",
      "title": "How to Set Up a Raspberry Pi as a Home Web Server",
      "content_html": "<p>Like most of the world, I’ve been spending a lot of time at home lately. Over the winter I was experimenting with building my own web-based digital tools, like an app to track articles and books I was reading. I initially thought I would need to buy hosting space to have the app accessible, but realized I mostly needed to use it when I was at home anyway, so a URL that only existed on my local network work also work.</p>\n<p>I have done a few projects with Raspberry Pis before, most notably a <a href=\"https://www.patrickweaver.net/blog/building-a-futuristic-record-player-with-glitch-and-raspberry-pi/\">computer vision “record player”</a>, but always found myself looking up the same things like how to set up Wi-Fi and SSH access. I seemed to need to do the same handful of things every time, but they were spread across various documentation and how-tos. This time while setting up the Pi web server I took notes so I would have it all in one place.</p>\n<p>To follow along with these steps you will need a second computer to set up the SD card (though you could probably start with a <a href=\"https://www.adafruit.com/product/4266\">preformatted SD card also</a>), and any kind of Raspberry Pi. I have run web servers on Pi Zeros before, though it can be a challenge to install newer versions of Node.js on ARMv6 based Pis (Zero and the original Raspberry Pi), and sometimes when building a large client app I’ve had to move to a faster Pi from a Pi Zero.</p>\n<h4>SD Card Setup</h4>\n<h5>1. Install the OS</h5>\n<p>Raspberry Pi recently released their own tool for formatting SD cards, <a href=\"https://www.raspberrypi.org/software/\">Raspberry Pi Imager</a>. It makes the process a lot easier than it had been previously. The first step is picking an OS to format the card with. Any of the Debian-based OSes should work, though the smallest download is Raspberry Pi OS Lite, which is all you need if you won’t be connecting a display. After that, select the SD card you want to install onto (there will probably only be one choice), and click “Write”.</p>\n<h5>Step 1 Summary</h5>\n<blockquote>\n<p><strong>1. Install the OS:</strong> Use Raspberry Pi Imager tool to write the OS to the SD card <a href=\"https://www.raspberrypi.org/software/\">source</a></p>\n</blockquote>\n<p><img src=\"https://patrickweaver.net/images/blog/how-to-raspberry-pi-server/raspberry-pi-imager.png\" alt=\"A screenshot of the Raspberry Pi Imager Tool\"></p>\n<h4>2. Set up Wi-Fi</h4>\n<p>The RPi Imager tool will likely eject the SD card for you when it’s finished writing, but you want to do two more things before booting up the Pi. You may need to remove the SD card and re-insert it into your computer to see the “Boot” filesystem. First, to enable Wi-Fi you will need to create a file with your network credentials. If you will be plugging the Pi into an ethernet cable you can skip this step.</p>\n<p>Create a file called <code>wpa_supplicant.conf</code> in the root directory of the SD card. Open the file in a text editor and paste in the following:</p>\n<pre><code class=\"language-conf\">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nupdate_config=1\ncountry=&lt;2 LETTER ISO 3166-1 COUNTRY CODE&gt;\n\nnetwork={\n    ssid=&quot;&lt;WI-FI SSID&gt;&quot;\n    psk=&quot;&lt;WI-FI PASSWORD&gt;&quot;\n}\n</code></pre>\n<p>Update the <code>country</code> line with your <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes\">ISO 3166 country code</a> (for the United States this will be <code>US</code> without quotes). Update the <code>ssid</code> and <code>psk</code> lines of the <code>network</code> section to your Wi-Fi network SSID and password, with quotes. Read more about setting up Wi-Fi <a href=\"https://www.raspberrypi.org/documentation/configuration/wireless/headless.md\">here</a>.</p>\n<p>My <code>wpa_supplicant.conf</code> might look like this:</p>\n<pre><code class=\"language-conf\">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nupdate_config=1\ncountry=US\n\nnetwork={\n    ssid=&quot;patricknet&quot;\n    psk=&quot;myverysecurepassword&quot;\n}\n</code></pre>\n<h5>Note on Text Encoding</h5>\n<blockquote>\n<p><a href=\"https://www.raspberrypi.org/documentation/configuration/wireless/headless.md\">Setting up a Raspberry Pi headless</a>: “Depending on the OS and editor you are creating this on, the file could have incorrect newlines or the wrong file extension so make sure you use an editor that accounts for this. Linux expects the line feed (LF) newline character.”</p>\n</blockquote>\n<h5>Learn More</h5>\n<blockquote>\n<p><a href=\"https://www.youtube.com/watch?v=TtiBhktB4Qg\">Scott Hanselman on CR/LF</a></p>\n</blockquote>\n<h4>Step 2 Summary</h4>\n<blockquote>\n<p><strong>2. Set up Wi-Fi:</strong> Create a <code>wpa_supplicant.conf</code> file in the root directory of the SD card, and populate it with your Wi-Fi credentials to enable Wi-Fi on boot. <a href=\"https://www.raspberrypi.org/documentation/configuration/wireless/headless.md\">source</a></p>\n</blockquote>\n<h4>3. Set up SSH</h4>\n<p>By default SSH access is disabled on a Raspberry Pi, the usual way of enabling it is either through the GUI or <code>raspi-config</code>, but there is also a simple way to pre-setup on the SD card. Create an empty file called <code>ssh</code> (without a file extension) in the root directory of the SD card, this will enable SSH on boot.</p>\n<h4>Step 3 Summary</h4>\n<blockquote>\n<p><strong>3. Set up SSH:</strong> Create an empty <code>ssh</code> file in the root directory of the SD card to enable SSH access on boot. <a href=\"https://www.raspberrypi.org/documentation/remote-access/ssh/README.md\">source</a></p>\n</blockquote>\n<h4>Raspberry Pi Setup</h4>\n<p>You are now ready to boot the Raspberry Pi, insert the SD card and power up the Pi. After a minute or two of boot time it should automatically connect to your network.</p>\n<h4>4. Connect via SSH</h4>\n<p>In a terminal on a second computer and connect to the Raspberry Pi via SSH. The default username and password will be <code>pi</code> and <code>raspberry</code>, and the default hostname will be <code>raspberrypi</code>. If your local network supports the <code>.local</code> TLD you may be able to connect using:</p>\n<pre><code class=\"language-bash\">ssh pi@raspberrypi.local\n</code></pre>\n<p>Otherwise you will need to look up the IP address of the Pi in your network admin tools and connect using the IP address:</p>\n<pre><code class=\"language-bash\">ssh pi@192.168.XXX.XXX\n</code></pre>\n<p>You can also skip this step and open the Terminal app on the Pi if using a display and keyboard connected to the Pi.</p>\n<p>If you have previously connected via SSH to a Raspberry Pi with the default hostname on the computer you are using you may see a message about the remote host identification changing. To successfully connect via SSH you will need to update the <code>known_hosts</code> file to remove the key stored for the other Raspberry Pi.</p>\n<p>On Linux or macOS the <code>known_hosts</code> file will be at <code>/Users/[YOUR USERNAME]/.ssh/known_hosts</code>. Find the line in this file that starts with either <code>raspberrypi.local</code> or the Raspberry Pi’s IP address and remove it.</p>\n<h4>Step 4 Summary</h4>\n<blockquote>\n<p><strong>4. Connect via SSH:</strong> Connect to the Raspberry Pi via ssh: <code>ssh pi@raspberrypi.local</code> or <code>ssh pi@192.168.XXX.XXX</code> (and enter the default password <code>raspberry</code>). You may need to remove a previous <code>raspberrypi.local</code> from <code>/Users/USERNAME/.ssh/known_hosts</code>.</p>\n</blockquote>\n<h4>5. Change the Password</h4>\n<p>After connecting to the Raspberry Pi via SSH the login message will suggest that you change the default password:</p>\n<blockquote>\n<p><code>SSH is enabled and the default password for the 'pi' user has not been changed.</code> &gt; <code>This is a security risk - please login as the 'pi' user and type 'passwd' to set a new password.</code></p>\n</blockquote>\n<p>Following the instructions you can type <code>passwd</code> which will prompt you first for your current password (<code>raspberry</code>), then for a new password twice.</p>\n<h4>Step 5 Summary</h4>\n<blockquote>\n<p><strong>5. Change the password:</strong> Run <code>passwd</code> to have the system prompt you for a new, more secure password.</p>\n</blockquote>\n<h4>6. Change the Hostname</h4>\n<p>The default hostname of your Raspberry Pi is <code>raspberrypi</code>. You may want to change this for a few reasons. If you have more than one Raspberry Pi on your network this will let you tell them apart, and if your network supports the .local TLD you can use the hostname as the URL to your app.</p>\n<p>You will need to update two files to change your hostname. First open <code>/etc/hostname</code> and change the first and only line in the file (currently <code>raspberrypi</code>) to your new hostname. Then, open <code>/etc/hosts</code> and update the the line with <code>raspberrypi</code> to your new hostname. Finally, reboot your Pi for the changes to take effect. Remember, if you SSHed in as <code>pi@raspberrypi.local</code> you will need to use the new hostname instead.</p>\n<h4>Step 6 Summary</h4>\n<blockquote>\n<p><strong>6. Change the Hostname:</strong> Open <code>sudo nano /etc/hostname</code> and change <code>raspberrypi</code> to your new hostname, then <code>sudo nano /etc/hosts</code> and change <code>raspberrypi</code> to your new hostname. Then reboot, <code>sudo reboot now</code>. <a href=\"https://pimylifeup.com/raspberry-pi-hostname/\">source</a></p>\n</blockquote>\n<h4>7. Change the Prompt</h4>\n<p>I also like the change the default bash prompt whenever I am going to be SSHing into a remote computer so that I can tell the difference at a glance between a local and remote terminal window.</p>\n<p>A simple change is just to prepend an emoji to the default prompt, which you can do by adding a line to <code>~/.bashrc</code>:</p>\n<pre><code class=\"language-bash\">echo 'PS1=&quot;🥧 ${PS1}&quot;' &gt;&gt; ~/.bashrc\n</code></pre>\n<p>I like the following prompt which adds colors that are different than the ones that I use locally, and a pie emoji:</p>\n<!-- markdownlint-disable no-inline-html -->\n<div class=\"fake-code\">\n<span style=\"color: white; background-color: silver;\">&nbsp;Mon May &nbsp;03 23:41:09&nbsp;</span><br>\n<span style=\"color: black; background-color: cyan;\">&nbsp;pi@b:&nbsp;</span> <span style=\"color: white; background-color: lightGrey;\">&nbsp;~&nbsp;</span><br>\n🥧 $<br>\n</div>\n<!-- markdownlint-enable no-inline-html -->\n<p>Update your prompt by editing your <code>~/.bashrc</code> file with <code>sudo nano ~/.bashrc</code>. The bash prompt is set with the <code>PS1</code> variable, which has two versions in the default Raspberry Pi <code>~/.bashrc</code>, one for when <code>color_prompt</code> is set to <code>yes</code>, another for otherwise. The default in Raspberry Pi OS is that <code>color_prompt</code> is set to yes, so feel free to overwrite only the first <code>PS1</code> variable.</p>\n<p>The value to set the prompt I showed above is (the sections with <code>[\\033 ...</code> and <code>\\[$(tput...</code> control turning on and off the colors):</p>\n<pre><code class=\"language-bash\">PS1=&quot;\\n\\[\\033[48;5;7m\\] \\d \\t \\[$(tput sgr0)\\]\\n\\[$(tput bold)\\]\\[\\033[38;5;0m\\]\\[\\033[48;5;14m\\] \\u@\\H: \\[$(tput sgr0)\\] \\[\\033[38;5;0m\\]\\[\\033[48;5;15m\\] \\w \\[$(tput sgr0)\\]\\n 🥧 \\\\$ &quot;\n</code></pre>\n<p>Run <code>source ~/.bashrc</code> (or <code>. ~/.bashrc</code>) to reload your terminal and see your new prompt.</p>\n<h4>Step 7 Summary</h4>\n<blockquote>\n<p><strong>7. Change the Prompt:</strong> Update the <code>PS1</code> variable in <code>~/.bashrc</code> to make it look different. Add a pie emoji with <code>echo 'PS1=&quot;🥧 ${PS1}&quot;' &gt;&gt; ~/.bashrc</code>.</p>\n</blockquote>\n<h4>8. Install Git</h4>\n<p>You will probably want to use Git to manage the source code for your app. It is not installed by default on Raspberry Pi OS so you will need to install it now with <code>apt</code>:</p>\n<pre><code class=\"language-bash\">sudo apt install git\n</code></pre>\n<p>Note: You may have to update by running <code>sudo apt-get update</code> in order for Git to install.</p>\n<p>You may also want to install another text editor if you want something more customizable than nano.</p>\n<h4>Step 8 Summary</h4>\n<blockquote>\n<p><strong>8. Install Git:</strong> Install git to manage your source code with <code>sudo apt install git</code>.</p>\n</blockquote>\n<h4>9. Install Nginx</h4>\n<p>You can now run a web server (with <code>sudo</code>) on port 80 and have it be available at your IP address or <code>[YOUR_HOSTNAME].local</code>, but that might require more configuration. It will be easier to manage your app if you install a web server/reverse proxy like Nginx. You can install Nginx with <code>apt</code>:</p>\n<pre><code class=\"language-bash\">sudo apt install nginx\n</code></pre>\n<p>Once Nginx is installed you should be able to access the default Nginx webpage at your Raspberry Pi’s IP Address or <code>[YOUR_HOSTNAME].local</code>. Make sure to type in the <code>http://</code> the first time if you are using the <code>.local</code> TLD to avoid triggering search in your browser.</p>\n<p><img src=\"https://patrickweaver.net/images/blog/how-to-raspberry-pi-server/nginx-default.png\" alt=\"A screenshot of the default Nginx page\"></p>\n<p>You can now serve any static website from <code>/var/www/html</code>, if you look there you will see an <code>index.html</code> or <code>index.nginx-debian.html</code> file that is generating the current page.</p>\n<h4>Step 9 Summary</h4>\n<blockquote>\n<p><strong>9. Install Nginx:</strong> Install with <code>apt install nginx</code>, then put a static webpage in <code>/var/www/html</code>.</p>\n</blockquote>\n<h4>10. Install nvm and npm</h4>\n<p>I make most of my web apps these days in JavaScript, there are lots of ways to install node and npm, but one easy way to manage versions is with nvm, which can be installed with the script below:</p>\n<pre><code class=\"language-bash\">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash\n</code></pre>\n<p>Then reload your terminal with <code>. ~/.bashrc</code> and install the current LTS version of node with <code>nvm install lts</code>.</p>\n<p><strong>Note:</strong> On an original Raspberry Pi, or a Raspberry Pi Zero, the ARMv6 chip is no longer supported by current versions of node. “Unofficial” ARMv6 builds of node are available at: <a href=\"https://unofficial-builds.nodejs.org/\">unofficial-builds.nodejs.org</a>. To install a version using an unofficial build use:</p>\n<pre><code class=\"language-bash\">NVM_NODEJS_ORG_MIRROR=https://unofficial-builds.nodejs.org/download/release nvm install lts\n</code></pre>\n<h4>Step 10 Summary</h4>\n<blockquote>\n<p><strong>10. Install nvm and npm:</strong> <code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash</code>, <code>. ~/.bashrc</code>, <code>nvm install lts</code>.</p>\n</blockquote>\n<h4>11. Set Up Reverse Proxy</h4>\n<p>In order to access your app on your local network without a port number in the URL it will need to be accessible on port 80, but it will be easier to run your app on another port locally. This can be done with an Nginx reverse proxy.</p>\n<p>Nginx configuration is done via server block files, you can delete the default enabled server block by running:</p>\n<pre><code class=\"language-bash\">sudo rm /etc/nginx/sites-enabled/default\n</code></pre>\n<p>Next, make your own empty server block in the <code>sites-available</code> directory: . The <code>[YOUR SITE]</code> part of the path can be anything, but it makes sense to give it the name of your app.</p>\n<pre><code class=\"language-bash\">sudo touch /etc/nginx/sites-available/[YOUR SITE].conf\n</code></pre>\n<p>You can now edit your server block file:</p>\n<pre><code class=\"language-bash\">sudo nano /etc/nginx/sites-available/[YOUR SITE].conf\n</code></pre>\n<p>The server block below will proxy processes running on port 8080 to port 80 (but you can substitute any port on the <code>proxy_pass</code> line). Make sure to replace the <code>[HOSTNAME]</code> sections with your Raspberry Pi’s hostname (or omit this line if accessing via IP Address):</p>\n<pre><code class=\"language-conf\">server {\n    listen 80;\n    server_name www.[HOSTNAME].local [HOSTNAME].local;\n\n    location / {\n       proxy_pass http://127.0.0.1:8080;\n    }\n}\n</code></pre>\n<p>Then, link your Nginx config file to the <code>sites-enabled</code> directory:</p>\n<pre><code class=\"language-bash\">sudo ln -s /etc/nginx/sites-available/[YOUR-SITE].conf /etc/nginx/sites-enabled/[YOUR-SITE].conf\n</code></pre>\n<p>Test your Nginx config with <code>sudo nginx -t</code>. You should see a success confirmation message:</p>\n<!-- markdownlint-disable no-inline-html -->\n<samp>\nnginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n</samp>\n<!-- markdownlint-enable no-inline-html -->\n<p>To enable the configuration reload the Nginx config:</p>\n<pre><code class=\"language-bash\">sudo systemctl reload nginx\n</code></pre>\n<p>The last step is cloning your project to the Raspberry Pi and running it on port 8080, your app should now be available at <code>[HOSTNAME].local</code>!</p>\n<h4>Step 11 Summary</h4>\n<blockquote>\n<p><strong>11. Set Up Reverse Proxy:</strong> Remove default: <code>sudo rm /etc/nginx/sites-enabled/default</code>, Create config file: <code>sudo touch /etc/nginx/sites-available/[YOUR SITE].conf</code>, Edit config file (see above): <code>sudo nano /etc/nginx/sites-available/[YOUR SITE].conf</code>, Link to sites-enabled: <code>sudo ln -s /etc/nginx/sites-available/[YOUR-SITE].conf /etc/nginx/sites-enabled/[YOUR-SITE].conf</code>, Reload Nginx: <code>sudo systemctl reload nginx</code>. <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-debian-10\">source</a></p>\n</blockquote>\n<p><img src=\"https://patrickweaver.net/images/blog/how-to-raspberry-pi-server/hello-world.png\" alt=\"A screenshot of a “Hello, World” page hosted on a Raspberry Pi\"></p>\n<hr>\n<h4>All Steps:</h4>\n<ol>\n<li><strong>Install the OS:</strong> Use Raspberry Pi Imager tool to write the OS to the SD card <a href=\"https://www.raspberrypi.org/software/\">source</a></li>\n<li><strong>Set up Wi-Fi:</strong> Create a <code>wpa_supplicant.conf</code> file in the root directory of the SD card, and populate it with your Wi-Fi credentials to enable Wi-Fi on boot. <a href=\"https://www.raspberrypi.org/documentation/configuration/wireless/headless.md\">source</a></li>\n<li><strong>Set up SSH:</strong> Create an empty <code>ssh</code> file in the root directory of the SD card to enable SSH access on boot. <a href=\"https://www.raspberrypi.org/documentation/remote-access/ssh/README.md\">source</a></li>\n<li><strong>Connect via SSH:</strong> Connect to the Raspberry Pi via ssh: <code>ssh pi@raspberrypi.local</code> or <code>ssh pi@192.168.XXX.XXX</code> (and enter the default password <code>raspberry</code>). You may need to remove a previous <code>raspberrypi.local</code> from <code>/Users/USERNAME/.ssh/known_hosts</code>.</li>\n<li><strong>Change the password:</strong> Run <code>passwd</code> to have the system prompt you for a new, more secure password.</li>\n<li><strong>Change the Hostname:</strong> Open <code>sudo nano /etc/hostname</code> and change <code>raspberrypi</code> to your new hostname, then <code>sudo nano /etc/hosts</code> and change <code>raspberrypi</code> to your new hostname. Then reboot, <code>sudo reboot now</code>. <a href=\"https://pimylifeup.com/raspberry-pi-hostname/\">source</a></li>\n<li><strong>Change the Prompt:</strong> Update the <code>PS1</code> variable in <code>~/.bashrc</code> to make it look different. Add a pie emoji with <code>echo 'PS1=&quot;🥧 ${PS1}&quot;' &gt;&gt; ~/.bashrc</code>.</li>\n<li><strong>Install Git:</strong> Install git to manage your source code with <code>sudo apt install git</code>.</li>\n<li><strong>Install Nginx:</strong> Install with <code>apt install nginx</code>, then put a static webpage in <code>/var/www/html</code>.</li>\n<li><strong>Install nvm and npm:</strong> <code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash</code>, <code>. ~/.bashrc</code>, <code>nvm install lts</code>.</li>\n<li><strong>Set Up Reverse Proxy:</strong> Remove default: <code>sudo rm /etc/nginx/sites-enabled/default</code>, Create config file: <code>sudo touch /etc/nginx/sites-available/[YOUR SITE].conf</code>, Edit config file (see above): <code>sudo nano /etc/nginx/sites-available/[YOUR SITE].conf</code>, Link to sites-enabled: <code>sudo ln -s /etc/nginx/sites-available/[YOUR-SITE].conf /etc/nginx/sites-enabled/[YOUR-SITE].conf</code>, Reload Nginx: <code>sudo systemctl reload nginx</code>. <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-debian-10\">source</a></li>\n</ol>\n",
      "date_published": "2021-05-03T00:00:00Z"
    }
    ,
    {
      "id": "https://patrickweaver.net/blog/a-recurse-center-remote-batch/",
      "url": "https://patrickweaver.net/blog/a-recurse-center-remote-batch/",
      "title": "Participating in a Remote Batch at the Recurse Center",
      "content_html": "<p>Participating in a batch at the <a href=\"https://www.recurse.com/\">Recurse Center</a> is something that I’ve thought on-and-off about doing since I found out about it (then called Hacker School) sometime between 2013 and 2015, but it just never seemed like the right time to leave my job and its subsidized health insurance until I was laid off (what turned out to be) early on in the pandemic. I had as recently as January 2020 been thinking, “maybe now is the right time to finally quit and do it,” and though I’m relieved I was able to get a few more months of savings and health insurance into 2020, participating in RC was the perfect change of pace and a motivating bridge between employment and the job search.</p>\n<figure>\n<div style=\"text-align: center;\">\n  <img src=\"https://patrickweaver.net/images/blog/rc2/rc-website.jpg\" alt=\"A screenshot from the Recurse Center website with a notice about operating remotely\" style=\"max-width: 500px; margin: 0 auto;\">\n</div>\n<figcaption>Screenshot from recurse.com</figcaption>\n</figure>\n<p>I had been working from home at my old job from mid March to when I left in mid July, but I didn’t realize until my first day at RC, that even though I had frequently seen friends and coworkers on video calls and in outdoor settings for the past 6 months, it was rare that I had the chance to speak to anyone I hadn’t previously met since March 2020.</p>\n<p>There are a few different pieces to the experience of a remote batch at RC. <a href=\"https://www.recurse.com/virtual-rc\">Virtual RC</a> is a fun game-like experience where each participant (and visiting alumni) has an avatar on the map. One corner of the map is more organized, and designed with a layout intended to mimic the physical RC space in Brooklyn, but the rest of the map is open for creative world building or experiments (there is even a Virual RC API now!). Each of the “rooms” in the structured corner of the map has a persistant video call link in it, and you can see which other participants are in the room on a call. Since I’ve started my new job I’ve missed being able to see who is already in a zoom call before deciding to join an optional meeting! Participants are encouaged to create a desk, where you can set an emoji status and leave a short note describing what you are up to that day. There are also audio rooms, which are great for more informal, or group conversations, and I’m only realizing now how much easier it is to start a call when you don’t have to open a new link and wait for a video call service to connect. A lot of the day-to-day conversation at remote RC happens via text on <a href=\"https://zulip.com/\">Zulip</a> (though this was the case for in-person RC also). It’s easy to reach out for help or to look for a pairing buddy on Zuip, and one of the most active streams (like channels in other chat apps) is Checkins where in-batch Recursers regularly post about what they’re working on.</p>\n<figure>\n<div style=\"text-align: center;\">\n  <img src=\"https://patrickweaver.net/images/blog/rc2/virtual-rc.png\" alt=\"A screenshot from Virtual RC with my avatar on top of the RC logo drawn with wall blocks\" style=\"max-width: 500px; margin: 0 auto;\">\n</div>\n<figcaption>Hanging out on top of the RC logo in Virutal RC</figcaption>\n</figure>\n<p>I came into RC with <a href=\"https://patrickweaver.net/blog/recurse-center-week-1/#rc-goals\">a few goals</a> ranging form ambitious (real-time NYC subway map or self-hosted social network prototype), to the kinds of things I often made when I had a few hours to spare (SwiftUI proof of concept checklist app). I had spent the weeks leading up to my batch doing what I wanted to think of as a mini RC-like experience re-learning Swift and using SwiftUI for the first time. I had hoped to finish the <a href=\"https://www.hackingwithswift.com/100/swiftui\">100 Days of SwiftUI</a> tutorials in time for day 1 at RC but ended up being about a week too slow.</p>\n<p>I was surprised at the 9-5ness of the events and chatter in remote RC, though one of the most exciting things about doing a remote batch was being able to meet and collaborate with people from around the world (I counted at least 8 timezones in my batch), most events occurred bewteen 9am and 5pm Eastern Time. I would guess that this means that the average RC participant is spending less time in RC, than when in an in-person batch, which depending on your goals and ability to focus when something potentially more fun is going on, could be a benefit or a drawback to the remote RC experience.</p>\n<p>After speeding through the SwiftUI tutorials in my first week (and getting kind of tired of working in an unfamiliar language), I decided to spend most of my time working on my <a href=\"https://patrickweaver.net/blog/making-a-real-time-nyc-subway-map-with-real-weird-nyc-subway-data/\">real-time NYC subway map project</a> that I had first prototyped in early 2020. I eventually was able to get a mostly working prototype of the full system, coincidentally on almost the exact day that the MTA <a href=\"https://www.curbed.com/2020/10/first-look-new-yorks-digital-subway-map-comes-alive-today.html\">released</a> their own version. I thought that the subway map would be one of a few medium sized projects that I would be able to spend 2 to 3 weeks on during my RC time, but I had already spent more than half of my 12 week batch on it. I had done a few other one-off projects like an <a href=\"https://doodles.patrickweaver.net/10-print-video-game/\">abstract “video game”</a> based on the 10 Print pattern and a few explorations into techincal topics like <a href=\"https://doodles.patrickweaver.net/canvas-lines/\">the browser JavaScript canvas API</a>, but I decided that I should try to find a real medium-sized project for my last few weeks at RC.</p>\n<figure>\n<div style=\"text-align: center;\">\n  <img src=\"https://patrickweaver.net/images/blog/rc2/canvas-lines.png\" alt=\"A screenshot from my slides on drawing pixel perfect lines on the JS canvas\" style=\"max-width: 500px; margin: 0 auto;\">\n</div>\n<figcaption>It’s hard to draw crisp lines on the JS canvas!</figcaption>\n</figure>\n<p>I felt like I had mostly been working though a big challenge with technologies that were pretty familiar so far (JavaScript and the <a href=\"https://leafletjs.com/\">Leaflet.js mapping library</a>), so I wanted to find a project that I could use to learn something new, but not spend all my time on implementation details like I had been doing learning SwiftUI. I had created a static website on the <a href=\"https://doodles.patrickweaver.net/\">doodles subdomain</a> of my website that I wanted to keep filling out, so a useful constraint was to make something on the web that wouldn’t need a backend (the doodles website is static and built with <a href=\"https://www.11ty.dev/\">Eleventy</a> , as are this website, and most of the doodles)). In the last year at my job, and through collaborating with other RC participants during my batch I had gotten pretty quick with prototyping things with React, but I hadn’t used either <a href=\"https://reactjs.org/docs/hooks-intro.html\">React Hooks</a>, or <a href=\"https://www.typescriptlang.org/\">TypeScript</a> for anything. I decided to try learning both and created a <a href=\"https://doodles.patrickweaver.net/crossword/editor\">web-based Crossword Puzzle composer</a>.</p>\n<figure>\n<div style=\"text-align: center;\">\n  <img src=\"https://patrickweaver.net/images/blog/rc2/crossword.png\" alt=\"A screenshot of the crossword puzzle app with symmetrical squares blacked out\" style=\"max-width: 500px; margin: 0 auto;\">\n</div>\n<figcaption>A crossword puzzle with multiple kids of symmetries</figcaption>\n</figure>\n<p>The crossword puzzle app was a fun mix of small challenges and interesting design decisions. One of the first things that stood out to me was that I had never really thought about the algorithm that is used to number crossword puzzle answers on the board, the kind of thing that is immediately understandable, but more complex that you would expect it to be when represented with a programming language. React Hooks were immediately very useful since most of the components for the app needed a sprinkling of state, but not too much, and TypeScript was helpful, especially in the context of RC because I paired with a few people on certain self-contained parts of the app like the symmetry for square toggling, and the defined types help people quickly pick up what the code we were writing would do. My favorite part of the crossword puzzle app is that to store a composed puzzle without a backend, I encode the whole puzzle state into the URL (here is a <a href=\"https://doodles.patrickweaver.net/crossword/play/#eyJzdGF0ZSI6W1tbWyJmIiwiIiwiZmYiLG51bGwsbnVsbCwwXSxbImYiLCIiLCJ-mZiIsbnVsbCxudWxsLDFdLFsidCIsIlIiLCJ0dCIsMSwxLDJdLFsidCIsIkMiLC-JmdCIsMSwyLDNdXSxbWyJ0IiwiRiIsInR0IiwzLDMsNF0sWyJ0IiwiSSIsImZ0I-iwzLDQsNV0sWyJ0IiwiRiIsImZmIiwzLDEsNl0sWyJ0IiwiTyIsImZmIiwzLDIs-N11dLFtbInQiLCJBIiwidGYiLDUsMyw4XSxbInQiLCJNIiwiZmYiLDUsNCw5XSx-bInQiLCJJIiwiZmYiLDUsMSwxMF0sWyJ0IiwiRCIsImZmIiw1LDIsMTFdXSxbWy-J0IiwiTiIsInRmIiw2LDMsMTJdLFsidCIsIk8iLCJmZiIsNiw0LDEzXSxbInQiL-CJEIiwiZmYiLDYsMSwxNF0sWyJ0IiwiRSIsImZmIiw2LDIsMTVdXV0sW1tbImEi-LDEsIkZLQSBIYWNrZXIgU2NoLiIsIlJDIiwyXSxbImEiLDMsIk9yZGVyIGluIGE-gcXVldWUiLCJGSUZPIiw0XSxbImEiLDUsIkluIHRoZSBtaWRkbGUgb2YiLCJBTU-lEIiw4XSxbImEiLDYsIkphdmFTY3JpcHQgcnVudGltZSIsIk5PREUiLDEyXV0sW-1siZCIsMSwiV2lyZWxlc3MgdGVjaCB3aXRoIHRhZ3MiLCJSRklEIiwyXSxbImQi-LDIsIldoYXQgYSBwcm9ncmFtbWVyIHdyaXRlcyIsIkNPREUiLDNdLFsiZCIsMyw-iQ29tcHV0ZXIgYWlyIG1vdmVyIiwiRkFOIiw0XSxbImQiLDQsIlNob3J0aGFuZC-Bmb3Igb25lJ3MgcHJlZmVyZW5jZSIsIklNTyIsNV1dXV19\">small RC themed puzzle</a>). I even discovered seemingly documented nowhere else bug in iMessage when prototyping this feature. When I first sent a friend a link to a puzzle as a test, iMessage wouldn’t parse it as a link, so they just got a wall of what looked like random characters. I looked around at other long tracking links I’d received in my emails and noticed they frequently had hyphen characters every so often. I added hyphens to my urls and all of a sudden iMessage could parse them as links!</p>\n<figure>\n<div style=\"text-align: center;\">\n  <img src=\"https://patrickweaver.net/images/blog/rc2/imessage.jpg\" alt=\"A screenshot of a message in iMessage with a long stiring of seemingly random characters\" style=\"max-width: 500px; margin: 0 auto;\">\n</div>\n<figcaption>A failed attempt to send a crossword</figcaption>\n</figure>\n<p>During the second half of my RC batch I also interviewed with a lot of companies. To help with this I attended a daily group for pairing on software job interview style questions. Coming back to these types of problems a few times a week was really helpful in being able to think through them quickly and I noticed a lot of progress in my ability to complete these kinds of challenges the more I practiced and interviewed.</p>\n<p>When I first applied to RC I had been feeling nervous about committing such a long period of time to not working before (hopefully!) starting a new job, I considered just doing a 1 week mini batch, or a 6 week half-batch, but the 12 weeks went by way more quikly than I had anticipated, and I was fortunately able to hit my idealistic goal of starting a new job in the new calendar year! The 12 weeks helped me feel free to dive into weird corners of the problems I wanted to work on like <a href=\"https://doodles.patrickweaver.net/drawing-parallel-lines-on-a-map/\">drawing parallel lines on a map</a> (lines were a big theme in my projects), without worrying that it would keep me from “finishing” my projects (author’s note: I still didn’t “finish” most of them). In the spirit of “never graduate” I hope to someday participate in another batch at the physical RC space, but in the meantime, anyone who like me has been sitting on the fence on applying to RC for years should take the opportunity to participate remotely and start the programming project you’ve always been meaning to get to!</p>\n<figure>\n<div style=\"text-align: center;\">\n  <img src=\"https://patrickweaver.net/images/blog/rc2/parallel-lines-curve.jpg\" alt=\"A screenshot of a prototype of my real-time subway map\" style=\"max-width: 500px; margin: 0 auto;\">\n</div>\n<figcaption>An early attempt to draw MTA track geography data as parallel tracks on a map</figcaption>\n</figure>\n",
      "date_published": "2021-01-25T16:33:26Z"
    }
    ,
    {
      "id": "https://patrickweaver.net/blog/making-a-real-time-nyc-subway-map-with-real-weird-nyc-subway-data/",
      "url": "https://patrickweaver.net/blog/making-a-real-time-nyc-subway-map-with-real-weird-nyc-subway-data/",
      "title": "Making a Real-Time NYC Subway Map with Real Weird NYC Subway Data",
      "content_html": "<p>Earlier this week the NYC MTA released a new <a href=\"https://map.mta.info/\">digital-first map</a>. The <a href=\"https://www.curbed.com/2020/10/first-look-new-yorks-digital-subway-map-comes-alive-today.html\">Curbed exclusive</a> that announced its release accurately portrays it as a strange child of both the 1972 map design by Massimo Vignelli and the current <a href=\"https://new.mta.info/map/5256\">“paper” map</a>. One feature of the new map (though it’s harder than it should be to notice at first) is real-time visualizations of each train in the system.</p>\n<p>I’ve been working on a similar concept, starting in February 2020, on which progress stalled once I stopped riding the subway regularly in March. But, when I started my batch at <a href=\"https://www.recurse.com/\">Recurse Center</a> I decided to pick up the project again. My inspiration for the map was the large TV screens that the MTA has installed in stations over the last few years, which frustratingly display the “paper” version of the map.</p>\n<figure>\n<div style=\"text-align: center;\">\n  <img src=\"https://patrickweaver.net/images/blog/nyc-subway/tv-screen-map.jpg\" alt=\"A photograph of a TV in a subway station with the “paper” map displayed.\" style=\"width: auto; max-height: 400px; margin: 0 auto;\">\n</div>\n<figcaption>Subway station TV (This is not a good photo, but it’s hard to take a picture of a screen underground)</figcaption>\n</figure>\n<p>Over the past few weeks at RC the subway map has been my main focus, which is longer than I expected the project to take (and though I have a prototype, I wouldn’t say I’m close to “done”). A big factor in the time the project has taken is some of the quirks in working with MTA data, which based on some of the bugs I’ve seen in the &quot;official&quot; version I’d say the team working on that version had to grapple with as well. I’m not sure I will ever finish this project to a state that would look great on a subway station tv, or be useful, but I do want to point out <a href=\"https://www.theweekendest.com/trains\">The Weekendest</a> by <a href=\"https://sunny.ng/\">Sunny Ng</a> (who also made <a href=\"https://www.goodservice.io/\">goodservice.io</a>), which is a great take on the concept, and handles some of the challenges of this kind of project much better than the MTA map does.</p>\n<p>For a long time the NYC Subway was almost <a href=\"https://www.theatlantic.com/technology/archive/2015/11/why-dont-we-know-where-all-the-trains-are/415152/\">completely lacking in real-time data</a>. For many years the only line that had even countdown clocks in stations was the L, which seems to be the line the MTA tries out new technology on, likely because it never shares tracks with any other line. Over the last 5 years the MTA has slowly installed countdown clocks in every station, and made the data that powers the countdown clocks available on their website, in apps, and as data online.</p>\n<p>Inspired and frustrated by the “paper” maps on the tv screens, I first became interested in working with MTA data in 2018, but I initially started working with bus data, I think for two reasons: the first was because at the time the API key for working with bus data was easier to obtain than for subway data, the second because my morning commute at the time usually started with the bus (The MTA, earlier this year, has fortunately updated the system for obtaining an API key for subway data). I made a small prototype of an iPhone app that would show real-time bus data, but got distracted by learning the Swift programming language and abandoned the project without building functionality beyond what the MTA already provided <a href=\"https://bustime.mta.info/\">on their bustime website</a>.</p>\n<p>That MTA Bustime website was the other inspiration for what became my map idea. Though you could only view one route at a time (and the functionality is not available on phone-size devices), the Bustime website showed, in addition to countdowns for each stop, the physical location of each bus on a map. This leads us to the first weird thing about working with NYC Subway data, unlike real-time bus data, the subway data does not contain the latitude and longitude data for each train that would make it easy to show them on a map.</p>\n<h4>Real-Time Transit Data</h4>\n<p>Transit data for most transit systems is available in formats called <a href=\"https://developers.google.com/transit/gtfs\">GTFS</a> (General Transit Feed Specification) and <a href=\"https://developers.google.com/transit/gtfs-realtime\">GTFS Realtime</a>, which were developed by Google (makes you wonder what the “G” originally stood for), but are now widely used. A GTFS file is, “a collection of at least six, and up to 13 CSV files (with extension .txt) contained within a .zip file.” and “The GTFS Realtime data exchange format is based on Protocol Buffers” (which are <a href=\"https://developers.google.com/protocol-buffers\">“Google’s language-neutral, platform-neutral, extensible mechanism for serializing structured data”</a>).</p>\n<p>The GTFS Realtime feeds are available through 9 different API endpoints from the MTA. These 9 endpoints roughly correspond to the line colors, with Shuttles combined with trains they share tracks or stations with, and the 1/2/3 and 4/5/6 sharing one endpoint. This list of separate endpoints is another challenge with working with the entirety of the MTA data.</p>\n<p>I have exclusively worked with the NYC MTA’s GTFS Realtime feeds through the <a href=\"https://www.npmjs.com/package/gtfs-realtime-bindings\">npm module</a> maintained by Google. It is very possible that some of the challenges I’ve encountered are due to trying to squeeze the “extensible mechanism for serializing structured data” into JSON. Each API response is mostly composed of an array of &quot;Feed Entity&quot; objects like <a href=\"https://patrickweaver.net/notes/nyc-subway-feed-entity/\">these</a>, but there are a few quirks to working with this data (some maybe because of the JSON conversion).</p>\n<ul>\n<li>Each item in the array has an <code>id</code> property, but unfortunately these ids do not consistently refer to the same train between each update, it’s best to ignore it.</li>\n<li>The array consists of pairs of objects that either have a <code>tripUpdate</code> property or a <code>vehicle</code> property. Each of these have a sub-property called <code>tripId</code> that allows you to unite the pairs, but there are also some that don’t have a corresponding item (usually these represent trips that recently ended or haven’t yet begun).</li>\n<li>The data mixes together HH:MM:SS timestamps for data about when a train’s trip started, and <a href=\"https://en.wikipedia.org/wiki/Unix_time\">Unix timestamps</a> for data about the current time (according to the API) and when a train will arrive at a station (the API provides both arrival and departure times but as far as I have seen they are always identical).</li>\n<li><code>tripUpdate</code> items show information about the stops a train will make in the future (stopTimeUpdates) and vehicle items show information about the current status of the train, but the first <code>stopTimeUpdate</code> is usually in the past.</li>\n</ul>\n<p>I had never heard of Protocol Buffers before starting this project, so I was excited to learn more about them while reading through <a href=\"https://dataintensive.net\">Designing Data Intensive Applications</a> with fellow Recursers. In the book Martin Kleppmann notes that a, &quot;curious detail of Protocol Buffers is that it does not have a list or array datatype, but instead has a repeated marker for fields (which is a third option alongside required and optional).&quot; This could be the reason for the strange organization of the <code>tripUpdate</code> and <code>vehicle</code> properties.</p>\n<h4>Calculating Train Locations</h4>\n<p>The subway real-time API doesn’t have latitude and longitude data because it is designed to feed data to countdown clock style applications that show when the train will be at a specific station. One of the earliest features that I built into the real-time map was a way to translate these station-by-station countdown clocks into an approximation of the location of each train. My first attempt at this was to just show a list of stations and display an icon for a train between the names of the station it had been at previously and the station it was approaching.</p>\n<figure>\n<div style=\"text-align: center;\">\n  <img src=\"https://patrickweaver.net/images/blog/nyc-subway/g-line.png\" alt=\"An early prototype diagram of G train positions.\" style=\"width: auto; max-height: 400px; margin: 0 auto;\">\n</div>\n<figcaption>A first prototype</figcaption>\n</figure>\n<p>The next step was plotting the stations on a map. To start off, as with the diagram version, I just placed each train at the midpoint between the station it was traveling from and the station it was traveling towards.</p>\n<p>A goal I had for the project was not just to show real-time train locations, but to animate them as they moved around the map. To determine how long I should expect a train to take to travel between each station I logged updates from the MTA API for a few hours and noted both the average time for a pair of stations, and the longest time I had seen for the pair. I’m still experimenting a little bit with what values to use as the baseline, but from looking at the logged numbers there does seem to be an expected amount of time for most stations.</p>\n<figure>\n<div class=\"data\">\n<pre><code class=\"language-javascript\">G: {\n   G22: { N: { avg: 60, max: 71 }, S: null },\n   G24: { N: { avg: 123, max: 180 }, S: { avg: 60, max: 106 } },\n   G26: { N: { avg: 75, max: 90 }, S: { avg: 108, max: 180 } },\n   G28: { N: { avg: 128, max: 180 }, S: { avg: 78, max: 90 } },\n   G29: { N: { avg: 60, max: 76 }, S: { avg: 139, max: 180 } },\n   G30: { N: { avg: 51, max: 74 }, S: { avg: 70, max: 90 } },\n   G31: { N: { avg: 60, max: 90 }, S: { avg: 58, max: 69 } },\n   G32: { N: { avg: 66, max: 87 }, S: { avg: 53, max: 84 } },\n   G33: { N: { avg: 50, max: 66 }, S: { avg: 67, max: 84 } },\n   G34: { N: { avg: 58, max: 90 }, S: { avg: 54, max: 66 } },\n   G35: { N: { avg: 68, max: 86 }, S: { avg: 50, max: 81 } },\n   G36: { N: { avg: 81, max: 161 }, S: { avg: 59, max: 71 } },\n   A42: { N: { avg: 70, max: 177 }, S: { avg: 87, max: 157 } },\n   F20: { N: { avg: 68, max: 90 }, S: { avg: 86, max: 165 } },\n   F21: { N: { avg: 72, max: 120 }, S: { avg: 76, max: 120 } },\n   F22: { N: { avg: 62, max: 90 }, S: { avg: 84, max: 120 } },\n   F23: { N: { avg: 90, max: 120 }, S: { avg: 88, max: 150 } },\n   F24: { N: { avg: 101, max: 120 }, S: { avg: 67, max: 84 } },\n   F25: { N: { avg: 139, max: 180 }, S: { avg: 71, max: 90 } },\n   F26: { N: { avg: 120, max: 120 }, S: { avg: 109, max: 150 } },\n   F27: { N: null, S: { avg: 81, max: 120 } },\n }\n</code></pre>\n</div>\n<figcaption>Average and max wait times in seconds for stops on the G line.</figcaption>\n</figure>\n<figure style=\"overflow: scroll;\">\n<table>\n<thead>\n<tr>\n<th>Trip Id</th>\n<th>Trip Start Time</th>\n<th>Trip Date</th>\n<th>Route</th>\n<th>Stop1 Arrival</th>\n<th>Stop1 Id</th>\n<th>Stop2 Arrival</th>\n<th>Stop2 Id</th>\n<th>Seconds</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>073476_G..N</td>\n<td>12:14:46</td>\n<td>20200818</td>\n<td>G</td>\n<td>1597768631</td>\n<td>G33N</td>\n<td>1597768692</td>\n<td>G32N</td>\n<td>61</td>\n</tr>\n<tr>\n<td>074600_G..N</td>\n<td>12:26:00</td>\n<td>20200818</td>\n<td>G</td>\n<td>1597769103</td>\n<td>G33N</td>\n<td>1597769172</td>\n<td>G32N</td>\n<td>69</td>\n</tr>\n<tr>\n<td>075000_G..N</td>\n<td>12:30:00</td>\n<td>20200818</td>\n<td>G</td>\n<td>1597769531</td>\n<td>G33N</td>\n<td>1597769596</td>\n<td>G32N</td>\n<td>65</td>\n</tr>\n<tr>\n<td>076501_G..N</td>\n<td>12:45:01</td>\n<td>20200818</td>\n<td>G</td>\n<td>1597770333</td>\n<td>G33N</td>\n<td>1597770396</td>\n<td>G32N</td>\n<td>63</td>\n</tr>\n<tr>\n<td>077700_G..N</td>\n<td>12:57:00</td>\n<td>20200818</td>\n<td>G</td>\n<td>1597771043</td>\n<td>G33N</td>\n<td>1597771104</td>\n<td>G32N</td>\n<td>61</td>\n</tr>\n<tr>\n<td>078403_G..N</td>\n<td>13:04:02</td>\n<td>20200818</td>\n<td>G</td>\n<td>1597771443</td>\n<td>G33N</td>\n<td>1597771524</td>\n<td>G32N</td>\n<td>81</td>\n</tr>\n<tr>\n<td>079600_G..N</td>\n<td>13:16:00</td>\n<td>20200818</td>\n<td>G</td>\n<td>1597772051</td>\n<td>G33N</td>\n<td>1597772112</td>\n<td>G32N</td>\n<td>61</td>\n</tr>\n<tr>\n<td>080550_G..N</td>\n<td>13:25:30</td>\n<td>20200818</td>\n<td>G</td>\n<td>1597772711</td>\n<td>G33N</td>\n<td>1597772776</td>\n<td>G32N</td>\n<td>65</td>\n</tr>\n</tbody>\n</table>\n<figcaption>Logged travel Times between the Bedford - Nostrand stop and the Myrtle - Willoughby stop on the G train</figcaption>\n</figure>\n<h4>Secret Stations</h4>\n<p>One thing I discovered while logging updates from the MTA API was that it contained secret stations! The MTA provides a <a href=\"http://web.mta.info/developers/data/nyct/subway/Stations.csv\">list of all of the stations in the system</a> with data like latitude and longitude. Each station has an ID (see Stop1 and Stop2 id in the diagram above and called &quot;GTFS Stop ID&quot; in the list). The stop IDs are a letter and 2 numbers, with the letter often corresponding to the line it serves (or used to historically), and the numbers mostly occurring in sequence. but some trains would have planned &quot;stops&quot; at stations that weren’t in the list! My best guess is that these stations are something station-like in the MTA’s infrastructure, which usually appear near the end of a line.</p>\n<ul>\n<li>&quot;H17&quot; is between Howard Beach/JFK Airport and Broad Channel on the A and Rockaway Shuttle and is likely where the Shuttle trains go to turn around.</li>\n<li>&quot;H19&quot; is before the Broad Channel stop on the A and Rockaway Shuttle and may also be related to Shuttle turnaround?</li>\n<li>&quot;H18&quot; and &quot;H05&quot; are between Broad Channel and Beach 67 St on the A and Rockaway Shuttle, which may have to do with tracks that run between Beach 67 and Beach 90 Sts.</li>\n<li>&quot;A29&quot; is between Penn Station and 14th St on the A, C, and E, which is strange because the C and E stop at 23rd St., which is also between those stations, but has the ID &quot;A30&quot;.</li>\n<li>&quot;A39&quot; is between Fulton St. and High St. on the A and C, which might have something to do with the track stubs on the Brooklyn side (one of which is the NYC Transit museum).</li>\n<li>&quot;A58&quot; is between Grant Av. and 80th St. on the A, which, is where the A train emerges from a tunnel to run on elevated tracks.</li>\n<li>&quot;A62&quot; is between Rockaway Blvd. and 104th St. on the A and probably has something to do with the merging between the 3 versions of the A at Rockaway Blvd.</li>\n<li>&quot;R60&quot; is between Queensboro Plaza and Lexington Ave/59th St. on the N, R, and W. My guess is that this has something to do with the N/W and R tracks merging before going into a tunnel.</li>\n<li>&quot;R65&quot; is between the Whitehall St. and Court St. stops on the R, and could also be related to the same track stubs as &quot;A39&quot;.</li>\n<li>&quot;B24&quot; is between Bay 50th St and Coney Island on the D, and is probably the MTA Coney Island Yard.</li>\n</ul>\n<h4>Drawing the Static Map</h4>\n<p>I wasn’t quite satisfied with the angular paths that drawing lines directly between stations created, and I was fortunately able to find <a href=\"https://github.com/blahblahblah-/theweekendest\">Sunny Ng’s advice</a> on extracting shape arrays from the non real-time GTFS MTA data. Using these shape arrays I could draw route maps with smooth curves, and even animate trains along those curves. But one of the things that makes a subway map a subway map is seeing lines that run on the same tracks as parallel lines. I also wanted to double these lines and show Northbound and Southbound trains on separate tracks (something that the new MTA map fails to do).</p>\n<p>After trying to approach the parallel lines problem geometrically I was pointed in the right direction by a fellow RC participant and was able to draw great looking lines by treating the Latitude/Longitude points in the shape arrays as vectors (More on this in my <a href=\"https://doodles.patrickweaver.net/drawing-parallel-lines-on-a-map/\">interactive slides on this problem</a> and more on the <a href=\"https://medium.com/transit-app/how-we-built-the-worlds-prettiest-auto-generated-transit-maps-12d0c6fa502f\">challenge of drawing nice train lines from the Transit app</a>).</p>\n<figure>\n<div style=\"display: flex; max-width: 100%;\">\n  <img src=\"https://patrickweaver.net/images/blog/nyc-subway/nyc-subway-f-g.jpg\" alt=\"A screenshot of my map.\" style=\"width: auto; max-height: 500px; max-width: 49%; margin: 0 auto;\">\n  <span style=\"width: 5px;\"></span>\n  <img src=\"https://patrickweaver.net/images/blog/nyc-subway/mta-f-g.jpg\" alt=\"A screenshot of the MTA map.\" style=\"width: auto; max-height: 500px; max-width: 49%; margin: 0 auto;\">\n</div>\n<figcaption>Similar sections of my map and the MTA map</figcaption>\n</figure>\n<h4>A Prototype</h4>\n<p>My map project is available on <a href=\"https://github.com/patrickweaver/nyc-subway/tree/971c538eb5de9ac524fa1db8656ddd9febd6f0e5\">GitHub</a>, bugs and all. I did most of the work on the map using only the G train API endpoint. This was a helpful limitation when I was first experimenting with what was possible using the data, but may have led to more bugs because of the slight differences in the data available for each set of lines.</p>\n<p>A common complaint about the new official real-time map is that it seems to use as much computer power as it can. My map isn’t much better because it is doing all of the geographic calculations in the user’s browser, my guess is that the MTA’s map is also. One update I might take on over the next week and a half as my time at RC winds down is moving these calculations to a server, and sending only train position changes to the map visualization. This may also help with the bug my current prototype exhibits where leaving and coming back to the tab a few minutes later will cause trains to fly around the map without regard for the lines or stations.</p>\n<p>The MTA data is weird because it’s created by a system that could never have anticipated the kind of systems that now try to contain it. Overall, working with and working around the weirdness in the data has been challenging, but a great reminder that the most interesting real-world problems are often hard to jam into our brittle computer systems, and that’s probably a good thing.</p>\n",
      "date_published": "2020-10-21T00:00:00Z"
    }
    ,
    {
      "id": "https://patrickweaver.net/blog/recurse-center-week-1/",
      "url": "https://patrickweaver.net/blog/recurse-center-week-1/",
      "title": "Week 1 at Recurse Center: Two Approaches to Learning",
      "content_html": "<p>I just finished my first week as part of the Fall 1 '20 batch at <a href=\"https://www.recurse.com\">Recurse Center</a>. I tried to split my time between being social and building skills that I want to use for future projects. The social aspect of RC is interesting because this batch is being conducted remotely.</p>\n<p>My batch at RC started exactly 5 months after my last day in an office, and something I had been thinking about over the last few months, is that I haven’t met anyone new since early March when NYC shut down because of the pandemic. It’s been very refreshing to meet people again, even if it’s via video calls and chat. RC has created an online representation of their physical space we call &quot;Virtual RC&quot;. Each of us have avatars we can move around the space, and there are permanent links to video call rooms that we can pop into for events or impromptu conversations. The Virtual RC experience pairs well with group chat organized into streams on different topics.</p>\n<figure>\n<p><img src=\"https://patrickweaver.net/images/blog/rc/virtual-rc.png\" alt=\"A screenshot of Virtual RC\"></p>\n<figcaption>My avatar hanging out in the \"Shannon\" room at Virtual RC</figcaption>\n</figure>\n<p>Other than social events I spent my first week at RC focused on two projects. The first was going through the <a href=\"https://www.hackingwithswift.com/100/swiftui\">100 Days of SwiftUI tutorials</a> (at many more than one a day), which I had started before the batch. The second was reviewing the <a href=\"https://github.com/patrickweaver/nyc-subway\">real time NYC Subway map</a> project I first started in January.</p>\n<p>I wish I had been able to finish the SwiftUI tutorials before the batch (my original goal), because it didn’t feel as useful to share what I was working on with other RC participants as I was re-building apps that someone else had designed, but I finished the last app on Friday and I’m excited to be able to use SwiftUI to quickly prototype projects for my phone.</p>\n<p>When I first started the subway map project in early 2020 I was excited about finishing it quickly, but in March when I also stopped taking the subway I lost enthusiasm for the project. Starting at RC has helped rekindle the excitement I had for it, I think partly because even though the batch is remote and there are participants from around the world, there is also a strong NYC contingent.</p>\n<p>An interesting aspect of building a map from MTA data is that the data structures that the MTA publishes are designed for building countdown clock style apps. I would imagine that the MTA calculates this per-station data from the location of each train, but in order to build an app that is more focused on location than time, I need to reverse engineer the location data from the distance in time each train from the next station. There are also other weird quirks, like train trip start times being provided in &quot;HH:MM:SS&quot; format, but station arrival times being provided in Unix time format.</p>\n<figure>\n<pre><code class=\"language-json\">{\n  &quot;id&quot;: &quot;000001G&quot;,\n  &quot;tripUpdate&quot;: {\n    &quot;trip&quot;: {\n      &quot;tripId&quot;: &quot;126481_G..N&quot;,\n      &quot;startTime&quot;: &quot;21:04:49&quot;,\n      &quot;startDate&quot;: &quot;20200815&quot;,\n      &quot;routeId&quot;: &quot;G&quot;\n    },\n    &quot;stopTimeUpdate&quot;: [\n      {\n        &quot;arrival&quot;: { &quot;time&quot;: &quot;1597541836&quot; },\n        &quot;departure&quot;: { &quot;time&quot;: &quot;1597541836&quot; },\n        &quot;stopId&quot;: &quot;G28N&quot;\n      },\n      {\n        &quot;arrival&quot;: { &quot;time&quot;: &quot;1597541904&quot; },\n        &quot;departure&quot;: { &quot;time&quot;: &quot;1597541904&quot; },\n        &quot;stopId&quot;: &quot;G26N&quot;\n      }\n\n      /* More stations below in real data */\n    ]\n  }\n}\n</code></pre>\n<figcaption>Example MTA Data</figcaption>\n</figure>\n<p>Splitting my programming time between learning SwiftUI and trying to wrap my head around the subway map again has felt like two different approaches to learning. In the past I have often jumped into building my own projects with a new tool or technology as soon as I feel like I had learned enough to do so, but I’ve often realized later that I spent a lot of time figuring out answers that I might have gotten to more quickly by completing a more thorough overview before starting.</p>\n<p>The subway map is one example of that type of project, but for good reason. It’s a project that when I started, I wasn’t sure was possible. It was inspired by a similar (but much simpler) map in the underground MUNI stations in San Francisco. The MUNI maps I remember from 15 years ago only showed trains in &quot;the tunnel,&quot; which although many lines run through, has a single trunk, that lines branch out from after going above ground (newer maps as seen below seem to show the whole system). Since these MUNI maps had existed since at least the early 00s I figured if one hadn’t been made (I’ve since found <a href=\"https://tracker.geops.ch/?z=13&amp;s=1&amp;x=-8232001.0970&amp;y=4969606.7622&amp;l=transport\">NYC maps that have been made</a>) for NY there must be a technical reason (it may just be that because until relatively recently <a href=\"https://www.theatlantic.com/technology/archive/2015/11/why-dont-we-know-where-all-the-trains-are/415152/\">per station data wasn’t available</a> in NYC).</p>\n<figure>\n<!-- markdownlint-disable no-inline-html -->\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/MBTA?ref_src=twsrc%5Etfw\">@MBTA</a> <a href=\"https://twitter.com/sfmta_muni?ref_src=twsrc%5Etfw\">@sfmta_muni</a> <a href=\"https://twitter.com/d_tribe?ref_src=twsrc%5Etfw\">@d_tribe</a> <a href=\"https://twitter.com/universalhub?ref_src=twsrc%5Etfw\">@universalhub</a> closer zoom. Incredibly useful. <a href=\"https://t.co/jqHuGyZrJR\">pic.twitter.com/jqHuGyZrJR</a></p>&mdash; Ari Ofsevit (@ofsevit) <a href=\"https://twitter.com/ofsevit/status/720301082899918850?ref_src=twsrc%5Etfw\">April 13, 2016</a></blockquote> <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<!-- markdownlint-enable no-inline-html -->\n<figcaption>\n<p>A photo of the real time MUNI map in a tweet by <a href=\"https://twitter.com/ofsevit/status/720301082899918850\">@ofsevit</a></p>\n</figcaption>\n</figure>\n<p>In order to gauge the feasibility of the project I wanted to get started quickly, throwing a map together and adding some markers for stations and individual trains at fixed times. Because I had limited experience working with transit data (which is provided in a <a href=\"https://developers.google.com/transit/gtfs\">very complex format</a>), or maps, this left me with both the sense that the project is possible, and a big spaghetti code mess.</p>\n<figure>\n<p><img src=\"https://patrickweaver.net/images/blog/rc/nyc-subway-v1.jpg\" alt=\"A screenshot of the first prototype of my subway map app\"></p>\n<figcaption>The first prototype of the subway map app</figcaption>\n</figure>\n<p>I started looking into SwiftUI because I’m interested in making my own home screen widgets once I update my phone to iOS 14, and these widgets are built using the framework. Knowing I would have time to experiment during my batch at RC, and wanting to avoid my usual new tool mess phenomenon, I prioritized giving myself a good understanding of how SwiftUI works, what it can and can’t do, and a general review of Swift. Once my batch started I found it more and more difficult to keep going through the tutorials instead of jumping into an original idea, but throughout the week, spending time figuring out what I was even thinking reviewing the code for the subway map project re-motivated me to get through it.</p>\n<p>In the first week at RC the return to a daily routine has also put me back in the frame of mind I spent a lot of my last job in, where I would come up with ideas for about 3 apps a day that would solve tiny problems. One example is, after a particular session of an RC event for pair programming on software job interview style questions where we selected a problem that ended up being very difficult in the language we chose to work in, I thought that maybe I should create a mini app for the group where we could rate problems for each other. A lot of these ideas that are generated through trying to solve small problems in my routine end up being apps that organize data into text boxes, which are often not very interesting, so I’m conflicted on whether or not to spend time following these threads that will likely continue to appear.</p>\n<p><span id=\"rc-goals\">A few other things that are slightly more interesting, or at least broadly useful that I want to get done during my time at RC are:</span></p>\n<ul>\n<li>The real time subway map</li>\n<li>A simple checklist app with a home screen widget made with SwiftUI</li>\n<li>A tool to convert an export from a Blogger blog to a static site generator</li>\n<li>A prototype of a self-hosted social network profile that can interface with other people’s self-hosted profiles</li>\n<li>A second iteration of my <a href=\"https://github.com/patrickweaver/ocr-email\">handwritten email sending project</a></li>\n<li>Something that takes ideas similar to Dynamicland (or the <a href=\"https://www.recurse.com/blog/132-living-room-making-rc-programmable\">Living Room</a> project at RC) into the remote world we’re living in.</li>\n</ul>\n<p>Overall I’m very excited to be spending time at RC, and I hope that it gives me time to explore ideas with weird corners and not settle for solving small simple problems quickly.</p>\n",
      "date_published": "2020-08-16T22:22:13Z"
    }
    ,
    {
      "id": "https://patrickweaver.net/blog/how-to-download-an-image-from-a-google-doc/",
      "url": "https://patrickweaver.net/blog/how-to-download-an-image-from-a-google-doc/",
      "title": "How to Download an Image from a Google Doc",
      "content_html": "<p>For some reason Google hasn’t built in a way for you to download images in Google docs! There are workarounds to get those image files like <a href=\"https://twitter.com/corduroy/status/1184758335934849025\">using Google Keep</a>, or <a href=\"https://twitter.com/tonyvincent/status/1021726699178708993\">downloading your whole doc as a .zip file</a>, but these have always felt like too many steps.</p>\n<p>And this is something that people really want!</p>\n<blockquote class=\"twitter-tweet\"><a href=\"https://twitter.com/user/status/1190182191520788480\"></a></blockquote> <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<blockquote class=\"twitter-tweet\"><a href=\"https://twitter.com/user/status/1277776054380265478\"></a></blockquote> <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<blockquote class=\"twitter-tweet\"><a href=\"https://twitter.com/user/status/710516705303384068\"></a></blockquote> <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<blockquote class=\"twitter-tweet\"><a href=\"https://twitter.com/user/status/1227582581350240257\"></a></blockquote> <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<blockquote class=\"twitter-tweet\"><a href=\"https://twitter.com/user/status/1225516004375179265\"></a></blockquote> <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<blockquote class=\"twitter-tweet\"><a href=\"https://twitter.com/user/status/1249761603559378945\"></a></blockquote> <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<blockquote class=\"twitter-tweet\"><a href=\"https://twitter.com/user/status/990395429383622656\"></a></blockquote> <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>As Steve Krouse points out here, it is possible to get the real URL of the image in your doc (but confusingly, as soon as you click on the image to select it the URL becomes obfuscated!).</p>\n<blockquote class=\"twitter-tweet\"><a href=\"https://twitter.com/user/status/1190358282877186050\"></a></blockquote> <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>I also noticed the URLs in the source, and decided to make an easy way to access it. The one trick ended up being, because clicking on the image made it disappear, finding a way to tell the code which image you wanted!</p>\n<p>I looked through some JavaScript documentation and realized I could use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event\">mouseover</a> event to detect when someone was hovering over the image. Unfortunately this means that it won’t work on a touchscreen device, but I’m guessing that most people who want to download an image are on a traditional computer.</p>\n<h4>How does it work?</h4>\n<p>I needed a way to run my code on any Google Doc, there’s probably a way to make Google Doc or Chrome extension to do this, but since I was asking people to run code in their potentially private docs I wanted to make the code as short and open source as possible.</p>\n<p>I decided that the best way to do this was a <a href=\"https://support.mozilla.org/en-US/kb/bookmarklets-perform-common-web-page-tasks\">bookmarklet</a>. If you’re unfamiliar with bookmarklets, they’re bookmarks (usually placed in your bookmarks toolbar (Cmd-Shift-B to toggle this on and off on a Mac), that instead of navigating to a webpage, run JavaScript when you click them.</p>\n<h4>Great! Tell me how to do it!</h4>\n<p>To get started you’ll have to &quot;install&quot; the bookmarklet. This is easy to do, and just means dragging a button into your bookmarks toolbar. <a href=\"https://doodles.patrickweaver.net/gdoc-image-dl\">I’ve hosted it here</a>.</p>\n<p>The instructions are simple!</p>\n<ol>\n<li>\n<p>Drag one of the bookmarklets (see the embed above) to your bookmarks toolbar. The text displayed is what will be show on the toolbar:</p>\n</li>\n<li>\n<p>Then, when you’re on a Google Doc, click the bookmarklet, then hover over an image embedded in the doc. Depending on your browser settings it will either download immediately, or open the actual image in a new tab.</p>\n</li>\n</ol>\n<h4>Great my problems are solved forever!</h4>\n<p>No guarantees that this will work long term, a quick look at the source code for any Google Doc will show that they’re very complex! I wouldn’t be surprised if Google changes the way these URLs work in the future, but this tool has worked for 6 months so maybe not!</p>\n<p>Long term I hope that they build in a way for people to download their images, but for now I hope this is helpful!</p>\n",
      "date_published": "2020-07-16T00:00:00Z"
    }
    ,
    {
      "id": "https://patrickweaver.net/blog/i-could-never-remember-how-to-make-a-simple-s3-upload-feature-so-i-wrote-it-down/",
      "url": "https://patrickweaver.net/blog/i-could-never-remember-how-to-make-a-simple-s3-upload-feature-so-i-wrote-it-down/",
      "title": "I Could Never Remember How to Make a Simple S3 Upload Feature So I Wrote It Down",
      "content_html": "<p>Whenever I start a new web project there is an ominous, literal, figurative, &quot;cloud&quot; lurking on the horizon: Will this project get complicated enough to need to be connected to S3 for file upload?</p>\n<p>More often than I’d like the answer is yes, and at this point I’ve re-learned how to connect a Node.js app to S3 more times than I’d like. Rather than keep learning just enough S3 to get a project working, and then instantly forgetting it, I decided to write the process down so I can follow my own instructions.</p>\n<p>I’m sure this will also find its way to people who know more than I do and might be able to alert me to anything I’m doing wrong. If this is you, <a href=\"https://twitter.com/patrickweave_r\">please reach out</a>!</p>\n<h4>Setting Up AWS Authentication</h4>\n<p>Connecting an app isn’t usually the most difficult part of setting up S3. Where I always have to go back to documentation is setting up user and bucket permissions correctly. When I first started using S3 around 2013 a common recommendation was to just set buckets to public and link to objects directly. More recently though, many people (including Amazon), recommend not making buckets public.</p>\n<p>In my experience, it’s best to create both a user and a policy when setting up AWS permissions. The keys you will use in your app will be associated with the user, and the permissions you want your user to have will be associated with the policy. This way, if your credentials are compromised you can create a new user, and all you have to do is add the policy to the new user.</p>\n<p>I’ve also found it’s a best practice to create a new bucket for each of the small apps that I make. If you’re working on a bigger project or want to set up a general purpose place to upload you may want to do this differently, but creating a unique bucket and user for each project helps me keep an eye on things, and not worry too much about credentials getting compromised. Because I only need one bucket for my app it’s easier to create it in the AWS web interface than to build functionality to create buckets into my app.</p>\n<h4>Creating a Bucket</h4>\n<!-- markdownlint-disable ol-prefix -->\n<ol>\n<li>Log into AWS and click on &quot;Services&quot; in the top left. Select &quot;S3&quot; in the &quot;Storage&quot; section, then click on &quot;Create Bucket&quot; on the main S3 screen.</li>\n</ol>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/wzb11or02x3fgsdlobl1.png\" alt=\"A screenshot of the main S3 screen\"></p>\n<ol start=\"2\">\n<li>Give your bucket a name (this will be visible to users so something related to your app is best), and select a region (probably whichever is closest to your users), leave &quot;Block all public access&quot; checked, then click &quot;Create bucket&quot;.</li>\n</ol>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/jqobhso6ba8idwecff7l.png\" alt=\"A screenshot of the Create bucket screen\"></p>\n<ol start=\"3\">\n<li>Note your bucket name (probably in an ENV variable), it’s now ready to receive uploads!</li>\n</ol>\n<!-- markdownlint-enable ol-prefix -->\n<h4>Creating a Policy</h4>\n<!-- markdownlint-disable ol-prefix -->\n<ol>\n<li>\n<p>Click on your name in the top right. In the dropdown select &quot;My Security Credentials&quot;, then in the &quot;Identity and Access Management (IAM)&quot; sidebar on the left, click on &quot;Policies&quot;.</p>\n</li>\n<li>\n<p>Click on the &quot;Create policy&quot; button. There are 2 ways to give your policy permissions, with the Visual Editor, and with JSON. We’ll use the Visual Editor here, but you can probably just pate the JSON at the end with minor edits.</p>\n</li>\n<li>\n<p>The Visual Editor has 4 sections: Service, Actions, Resources, and Request Conditions. Start in Service and click on S3.</p>\n</li>\n<li>\n<p>You want to add 3 specific actions: &quot;PutObject&quot; which allows uploading files, &quot;GetObject&quot; which allows reading files, and &quot;DeleteObject&quot; (I think you can figure this one out). &quot;GetObject&quot; is in the &quot;Read&quot; section, check the checkbox there. &quot;PutObject&quot; and &quot;DeleteObject&quot; are both in the &quot;Write&quot; section. At the end you should have 3 objects selected:</p>\n</li>\n</ol>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/xq9fza7qlzaxb9s2uwxx.png\" alt=\"A screenshot of the Create Policy actions selection\"></p>\n<ol start=\"5\">\n<li>In the Resources section click on &quot;Add ARN&quot;, then fill in your Bucket Name, and click on &quot;Any&quot; for Object name. This means that users with this policy can only perform the actions above on one bucket, but can perform those actions on any of the objects in that bucket.</li>\n</ol>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/n99mhoauau96yg2fp6j2.png\" alt=\"A screenshot of the Add ARN screen when creating a policy\"></p>\n<ol start=\"6\">\n<li>If you click over to the JSON editor you should see the code below. You can also just copy this in. Note that you should edit the &quot;Resource&quot; property to have your actual bucket name:</li>\n</ol>\n<pre><code class=\"language-json\">{\n  &quot;Version&quot;: &quot;2012-10-17&quot;,\n  &quot;Statement&quot;: [\n    {\n      &quot;Sid&quot;: &quot;VisualEditor0&quot;,\n      &quot;Effect&quot;: &quot;Allow&quot;,\n      &quot;Action&quot;: [&quot;s3:PutObject&quot;, &quot;s3:GetObject&quot;, &quot;s3:DeleteObject&quot;],\n      &quot;Resource&quot;: &quot;arn:aws:s3:::YOUR_BUCKET_NAME/*&quot;\n    }\n  ]\n}\n</code></pre>\n<ol start=\"7\">\n<li>Click on &quot;Review policy&quot;, then give your policy a name and a description. Then click &quot;Create policy&quot;.</li>\n</ol>\n<!-- markdownlint-enable ol-prefix -->\n<h4>Creating a User</h4>\n<!-- markdownlint-disable ol-prefix -->\n<ol>\n<li>Click on Users in the left sidebar, then the &quot;Add user&quot; button at the top of the screen, give your user a name and select the checkbox for &quot;Programmatic Access&quot;.</li>\n</ol>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/gi90azo1auvxzjdbamyz.png\" alt=\"A screenshot of the Add User screen\"></p>\n<ol start=\"2\">\n<li>\n<p>In the &quot;Set permissions&quot; section at the top of the page, click on &quot;Attach existing policies directly&quot;. Search for the policy you just created, then select it and click &quot;Next: Tags&quot;. You can skip Tags, and click &quot;Next: Review&quot;, then click &quot;Create user&quot;.</p>\n</li>\n<li>\n<p>You will now save your user’s credentials. This is the only time you will be able to do this, so make sure you save them somewhere safe. You will also need to add the credentials as ENV variables in your app. I recommend clicking the &quot;Download .csv&quot; button and saving the file, at least until you get your app set up.</p>\n</li>\n</ol>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/3rqbznl2dlvif555eorn.png\" alt=\"A screenshot of the attach policy section of the create user screen\"></p>\n<!-- markdownlint-enable ol-prefix -->\n<h4>A simple example app</h4>\n<p>Congratulations! You are done with the AWS setup, now you can work on your app. I have a simple and heavily commented <a href=\"https://github.com/patrickweaver/aws-s3-example\">example app</a> I use to add this functionality to new projects:</p>\n<figure>\n<img src=\"https://patrickweaver.net/images/blog/aws/app-screenshot.png\" alt=\"A screenshot of the app\">\n<figcaption>A screenshot of the app</figcaption>\n</figure>\n<p>The app is a Node.js app using Express. It uses 3 additional packages. <a href=\"https://www.npmjs.com/package/aws-sdk\">aws-sdk</a> adds functionality to communicate with S3, <a href=\"https://www.npmjs.com/package/uuid\">uuid</a> is used for object names in S3, and <a href=\"https://www.npmjs.com/package/multer\">multer</a> is used to process file upload to the server before passing it to S3.</p>\n<p>The index page is a plain HTML file, but there are two POST routes in server.js: <code>/upload-image-form</code> and <code>/upload-image-async</code>. The two routes are mostly the same, but are repeated for easy copying.</p>\n<p>Lines 1 through 24 of server.js are setting up the dependencies:</p>\n<h5>server.js</h5>\n<pre><code class=\"language-javascript\">// The regular Node/Express stuff:\nconst express = require(&quot;express&quot;);\nconst app = express();\napp.use(express.static(&quot;public&quot;));\n\n// I will use the UUID package for s3 file names\nconst { v4: uuidv4 } = require(&quot;uuid&quot;);\n\n// The AWS functionality is isolated for clarity:\nconst aws = require(&quot;./aws.js&quot;);\n\n// Multer processes the file in the request body\n// This allows one file to be uploaded at a time.\nvar multer = require(&quot;multer&quot;);\n\nvar memoryStorage = multer.memoryStorage();\nvar memoryUpload = multer({\n  storage: memoryStorage,\n  limits: {\n    fileSize: 4 * 1024, // 4KB file size limit\n    //fileSize: 10*1024*1024, // 10 Mb file size limit\n    files: 1,\n  },\n}).single(&quot;file&quot;);\n</code></pre>\n<p>The uploading to S3 happens in the two POST routes, and in an isolated <code>aws</code> module. I will go through the regular HTML form route here, but the JS API endpoint route is mostly the same.</p>\n<p>The route uses the previously defined <code>memoryUpload</code> to capture a file object in req.body.</p>\n<!-- markdownlint-disable no-duplicate-heading -->\n<h5>server.js</h5>\n<pre><code class=\"language-javascript\">app.post('/upload-image-form', memoryUpload, async function(req, res) {\n</code></pre>\n<p>Then, we create an object to send to the <code>aws</code> module (this is custom to this app, not the <code>aws-sdk</code> npm package) with req.file. Most of the code below is comments, but the short version of what we need to send to the aws is an object with the properties <code>file</code> and <code>id</code>. <code>file</code> is the contents of the file, <code>id</code> is what the file will be called in our AWS bucket:</p>\n<h5>server.js</h5>\n<pre><code class=\"language-javascript\">const file = req.file;\n\n/*\n    The file object has the following fields:\n    \n    fieldname: 'file' // This was specified in the file input field in the HTML\n    originalname:     // The original name of the file\n    encoding:         // The encoding of the file, don’t worry about\n                         this unless you want to look at the bytes.\n    mimetype:         // This will tell you what the filetype is, even if there\n                         is no extension, or if it’s wrong.\n    buffer:           // This is the actual data from the file\n    size:             // Only some files will have this, the file’s size in bytes\n    */\n\n// This is optional, but a way to find the extension\n// of an image file.\n//const fileExt = file.mimetype.split(&quot;/&quot;);\n\n// These\nconst upload = {\n  file: file,\n\n  /* You may want to store this metadata in S3, but it’s optional */\n  filetype: file.mimetype,\n\n  /* You may want to add this to the filename */\n  //fileExt: fileExt[fileExt.length - 1],\n\n  /* You may want to use the original filename */\n  //filename: file.originalname,\n\n  /* We’re going to use a random UUID file name in this example.\n         One thing that this does is makes sure it is unique.\n         If you upload a file with the same name it will overwrite the\n         existing file! */\n  id: uuidv4(),\n};\n\n// Upload the file, see ./helpers/aws.js\nconst response = await aws.upload(upload);\n</code></pre>\n<p>In the <code>aws.js</code> module first there is some general configuration. This is where we will access our <code>AWS_ACCESS_KEY_ID</code>, <code>AWS_SECRET_ACCESS_KEY</code>, and <code>S3BUCKET</code> ENV variables.</p>\n<h5>aws.js</h5>\n<pre><code class=\"language-javascript\">// The AWS package is used for all AWS services,\n// we only need the S3 part:\nvar AWS = require(&quot;aws-sdk&quot;);\nvar s3 = new AWS.S3({\n  signatureVersion: &quot;v4&quot;,\n});\n\n// Store your AWS creds in ENV variables:\nAWS.config.update({\n  accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n});\n\n// Your bucket isn’t secret, but you may want to use\n// different buckets for dev and production so it’s\n// helpful to store in an ENV variable.\nvar bucketName = process.env.S3BUCKET;\n</code></pre>\n<p>There are also 2 functions: <code>upload()</code>, which takes one <code>uploadObject()</code> parameter, uploads a file to S3, and returns confirmation and the S3 object’s key, and <code>getSignedUrl</code>, which takes an S3 key, and returns the file (more on this later).</p>\n<p><code>upload()</code> is what we passed our <code>file</code> object from <code>server.js</code> to. This function is essentially a wrapper around the <code>aws-sdk</code>’s <code>S3.putObject()</code> method. We collect the necessary parameters in an object, then pass that object to the method which we’ve defined as <code>s3.putObject()</code>:</p>\n<h5>aws.js</h5>\n<pre><code class=\"language-javascript\">// AWS S3 Upload params:\nvar params = {\n  // S3 stores files in buckets, each bucket\n  // has a globally unique name.\n  Bucket: bucketName,\n\n  // This will be the filename in AWS\n  Key: uploadObject.id,\n\n  // This is the contents of the file.\n  Body: uploadObject.file.buffer,\n\n  // This is optional, but your file in S3 won’t have Content-Type\n  // metadata unless you include it.\n  ContentType: uploadObject.filetype,\n};\n\nconst responseData = await s3.putObject(params).promise();\n</code></pre>\n<p>This is all wrapped in a <code>try</code> / <code>catch</code> block so if there aren’t any errors we can pass the key back to <code>server.js</code>:</p>\n<h5>aws.js</h5>\n<pre><code class=\"language-javascript\">// Likely this won’t happen because an error will be thrown,\n// but it’s good to check just in case. ¯\\_(ツ)_/¯\nif (!responseData) {\n  throw &quot;Upload failed&quot;;\n}\n\n// The response data has a single property, &quot;ETag&quot;,\n// you probably won’t need to do anything with it.\n\nconst s3Data = {\n  success: true,\n\n  // This key is what you would store in a DB, we didn’t\n  // get this back from S3, but since there wasn’t an error\n  // we trust that it is saved.\n  key: params.Key,\n\n  // Or, the url below could be stored if the permissions on the bucket\n  // or the upload are publicly viewable.\n  //url: &quot;https://&quot; + bucketName + &quot;.s3.amazonaws.com/&quot; + params.Key\n};\n\n// Send the object with success and the key back to server.js\nreturn s3Data;\n</code></pre>\n<p>It’s important to note that the <code>id</code> we pass back to <code>server.js</code> isn’t returned to us from the <code>s3.putObject()</code> method. <code>s3()</code> returns an <code>ETag</code>, which isn’t of much use for what we’re doing, but it’s enough to confirm that the upload completed successfully (What are ETags? <a href=\"https://teppen.io/2018/06/23/aws_s3_etags/\">teppen.io/2018/06/23/aws_s3_etags/</a>).</p>\n<p>Going back to server.js, this is where we would want to store our <code>id</code> somewhere. This string is what we will need to retrieve the file from s3. In this app we’re just demoing the upload functionality so we don’t store it anywhere. We access it once though to show the user that it worked. This is where we will use the other function in the <code>aws</code> module, <code>getSignedUrl</code>. Because our S3 bucket permissions only let our AWS user access objects, and otherwise our bucket permissions are &quot;No public access&quot;, we need to create a temporary signed URL to access the file.</p>\n<p>Using the id returned from the <code>upload()</code> function we call the <code>getSignedUrl()</code> function. When we get the signed url, we put it into some simple HTML to display it to the user (this is the main difference between the two <code>server.js</code> routes):</p>\n<h5>server.js</h5>\n<pre><code class=\"language-javascript\">// Confirm upload succeeded:\nif (!response.success || response.error) {\n  throw &quot;Response Error: &quot; + response.error;\n}\n\n/* - - - - -\n      You might want to do something with the response.key or\n      response.url here.\n    - - - - - */\n\n// Because our bucket is not publicly viewable we need to\n// get a signed URL to view the uploaded file. You DO NOT want\n// to store this signed URL in a DB, it will expire. You will\n// want to store either the key or url from the AWS response\n// above.\n\n// Get a new signed URL now that the file is uploaded:\n// Getting a signed URL requires the Bucket Name and the\n// file id, but we are using the same bucket name for everything\n// in this example. See ./helpers/aws.js for how this works.\nconst url = await aws.getSignedUrl(upload.id);\n\n// Very simple HTML response containing the URL and it rendered\n// as an image (if the file is not an image this will look like\n// a broken image).\nres.status(200).send(`\n      &lt;p&gt;\n        &lt;strong&gt;Signed URL:&lt;/strong&gt; &lt;a href=&quot;${url}&quot;&gt;${url}&lt;/a&gt;\n      &lt;/p&gt;\n      &lt;h4&gt;If it’s an image:&lt;/h4&gt;\n      &lt;img src=&quot;${url}&quot; width=&quot;400&quot; /&gt;\n    `);\n</code></pre>\n<p>The <code>getSignedUrl()</code> function in <code>aws</code> is a wrapper around the <code>S3.getSignedUrl</code> method (mostly putting it in our <code>aws</code> module allows us to avoid passing the Bucket Name from our routes:</p>\n<h5>aws.js</h5>\n<pre><code class=\"language-javascript\">// This function will get a signed URL which allows\n// access to non public objects, and objects in non\n// public buckets for a limited time.\nasync function getSignedUrl(key) {\n  // We are already authenticated so we just need the\n  // bucket name and the object’s key.\n  var params = {\n    Bucket: bucketName,\n    Key: key,\n  };\n\n  // The getSignedUrl method returns the url.\n  const url = await s3.getSignedUrl(&quot;getObject&quot;, params);\n  return url;\n}\n</code></pre>\n<!-- markdownlint-enable no-duplicate-heading -->\n<p>That’s it! Try out the app (in this example uploads are limited in size to 4KB for safety). You can <a href=\"https://github.com/patrickweaver/aws-s3-example\">fork the app on GitHub</a></p>\n",
      "date_published": "2020-04-21T00:00:00Z"
    }
    
  ]
}